<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3AdI00qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ElectricMotorTypeCommon</value>
  </data>
  <data name="PSet.Definition[3AdI00qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Defines a particular type of engine that is a machine for converting electrical energy into mechanical energy. Note that in cases where a close coupled or monobloc pump or close coupled fan is being driven by the motor, the motor may itself be considered to be directly part of the pump or fan. In this case , motor information may need to be specified directly at the pump or fan and not througfh separate motor/motor connection entities. NOTE: StartingTime and TeTime added at IFC4</value>
  </data>
  <data name="Property.Reference.Name[3INCI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[3INCI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Reference ID for this specified type in this project (e.g. type 'A-1'), provided, if there is no classification reference to a recognized classification system used.</value>
  </data>
  <data name="Property.Status.Name[3N8NY0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Property.Status.Definition[3N8NY0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Status of the element, predominately used in renovation or retrofitting projects. The status can be assigned to as "New" - element designed as new addition, "Existing" - element exists and remains, "Demolish" - element existed but is to be demolished,  "Temporary" - element will exists only temporary (like a temporary support structure).</value>
  </data>
  <data name="Property.MaximumPowerOutput.Name[3bRvI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>MaximumPowerOutput</value>
  </data>
  <data name="Property.MaximumPowerOutput.Definition[3bRvI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>The maximum output power rating of the engine.</value>
  </data>
  <data name="Property.ElectricMotorEfficiency.Name[3fcx80qU0HuO00025QrE$V]" xml:space="preserve">
    <value>ElectricMotorEfficiency</value>
  </data>
  <data name="Property.ElectricMotorEfficiency.Definition[3fcx80qU0HuO00025QrE$V]" xml:space="preserve">
    <value>The ratio of output capacity to intake capacity.</value>
  </data>
  <data name="Property.StartCurrentFactor.Name[3k_Fo0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>StartCurrentFactor</value>
  </data>
  <data name="Property.StartCurrentFactor.Definition[3k_Fo0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>IEC. Start current factor defines how large the peak starting current will become on the engine. StartCurrentFactor is multiplied to NominalCurrent and to give the start current.</value>
  </data>
  <data name="Property.StartingTime.Name[3p9He0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>StartingTime</value>
  </data>
  <data name="Property.StartingTime.Definition[3p9He0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>The time (in s) needed for the motor to reach its rated speed with its driven equipment attached, starting from standstill and at the nominal voltage applied at its terminals.</value>
  </data>
  <data name="Property.TeTime.Name[3uWcI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>TeTime</value>
  </data>
  <data name="Property.TeTime.Definition[3uWcI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>The maximum time (in s) at which the motor could run with locked rotor when the motor is used in an EX-environment. The time indicates that a protective device should trip before this time when the starting current of the motor is slowing through the device.</value>
  </data>
  <data name="Property.LockedRotorCurrent.Name[3ztwy0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>LockedRotorCurrent</value>
  </data>
  <data name="Property.LockedRotorCurrent.Definition[3ztwy0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>Input current when a motor armature is energized but not rotating.</value>
  </data>
  <data name="Property.MotorEnclosureType.Name[02f6C0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>MotorEnclosureType</value>
  </data>
  <data name="Property.MotorEnclosureType.Definition[02f6C0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>A list of the available types of motor enclosure from which that required may be selected.</value>
  </data>
  <data name="Property.FrameSize.Name[0FmL80qU4HuO00025QrE$V]" xml:space="preserve">
    <value>FrameSize</value>
  </data>
  <data name="Property.FrameSize.Definition[0FmL80qU4HuO00025QrE$V]" xml:space="preserve">
    <value>Designation of the frame size according to the named range of frame sizes designated at the place of use or according to a given standard.</value>
  </data>
  <data name="Property.IsGuarded.Name[0LjpC0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>IsGuarded</value>
  </data>
  <data name="Property.IsGuarded.Definition[0LjpC0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>Indication of whether the motor enclosure is guarded (= TRUE) or not (= FALSE).</value>
  </data>
  <data name="Property.HasPartWinding.Name[0R57s0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>HasPartWinding</value>
  </data>
  <data name="Property.HasPartWinding.Definition[0R57s0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>Indication of whether the motor is single speed, i.e. has a single winding (= FALSE) or multi-speed i.e.has part winding (= TRUE) .</value>
  </data>
</root>