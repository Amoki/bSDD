<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0XOYG0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_PropertyAgreement</value>
  </data>
  <data name="PSet.Definition[0XOYG0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>A property agreement is an agreement that enables the occupation of a property for a period of time.The objective is to capture the information within an  agreement that is relevant to a facilities manager. Design and construction information associated with the property is not considered. A property agreement may be applied to an instance of IfcSpatialStructureElement including to compositions defined through the IfcSpatialStructureElement.Element.CompositionEnum.Note that the associated actors are captured by the IfcOccupant class.</value>
  </data>
  <data name="Property.AgreementType.Name[0i7Ba0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>AgreementType</value>
  </data>
  <data name="Property.AgreementType.Definition[0i7Ba0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Identifies the predefined types of property agreement from which the type required may be set.</value>
  </data>
  <data name="Property.Identifier.Name[16LfS0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="Property.Identifier.Definition[16LfS0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>The identifier assigned to the agreement for the purposes of tracking.</value>
  </data>
  <data name="Property.Version.Name[1GU9M0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Property.Version.Definition[1GU9M0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>The version number of the agreement that is identified.</value>
  </data>
  <data name="Property.VersionDate.Name[1RCog0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>VersionDate</value>
  </data>
  <data name="Property.VersionDate.Definition[1RCog0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>The date on which the version of the agreement became applicable.</value>
  </data>
  <data name="Property.PropertyName.Name[1ZYsM0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>PropertyName</value>
  </data>
  <data name="Property.PropertyName.Definition[1ZYsM0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Addressing details of the property as stated within the agreement.</value>
  </data>
  <data name="Property.CommencementDate.Name[1kHVg0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>CommencementDate</value>
  </data>
  <data name="Property.CommencementDate.Definition[1kHVg0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Date on which the agreement commences.</value>
  </data>
  <data name="Property.TerminationDate.Name[1tDim0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>TerminationDate</value>
  </data>
  <data name="Property.TerminationDate.Definition[1tDim0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Date on which the agreement terminates.</value>
  </data>
  <data name="Property.Duration.Name[209vs0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Property.Duration.Definition[209vs0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>The period of time for the lease.</value>
  </data>
  <data name="Property.Options.Name[27vq80qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Property.Options.Definition[27vq80qVWHuO00025QrE$V]" xml:space="preserve">
    <value>A statement of the options available in the agreement.</value>
  </data>
  <data name="Property.ConditionCommencement.Name[2Gs1E0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>ConditionCommencement</value>
  </data>
  <data name="Property.ConditionCommencement.Definition[2Gs1E0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Condition of property provided on commencement of the agreement e.g. cold shell, warm lit shell, broom clean, turn-key.</value>
  </data>
  <data name="Property.Restrictions.Name[2QONk0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Restrictions</value>
  </data>
  <data name="Property.Restrictions.Definition[2QONk0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Restrictions that may be placed by a  competent authority.</value>
  </data>
  <data name="Property.ConditionTermination.Name[2WLro0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>ConditionTermination</value>
  </data>
  <data name="Property.ConditionTermination.Definition[2WLro0qVWHuO00025QrE$V]" xml:space="preserve">
    <value>Condition of property required on termination of the agreement e.g. cold shell, warm lit shell, broom clean, turn-key.</value>
  </data>
</root>