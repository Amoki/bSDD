<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[1jbN00qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_CableSegmentTypeCoreSegment</value>
  </data>
  <data name="PSet.Definition[1jbN00qSWHuO00025QrE$V]" xml:space="preserve">
    <value>An assembly comprising a conductor with its own insulation (and screens if any)</value>
  </data>
  <data name="Property.OverallDiameter.Name[1oyhg0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>OverallDiameter</value>
  </data>
  <data name="Property.OverallDiameter.Definition[1oyhg0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The overall diameter of a core (maximun space used).</value>
  </data>
  <data name="Property.RatedVoltage.Name[1uw9k0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>RatedVoltage</value>
  </data>
  <data name="Property.RatedVoltage.Definition[1uw9k0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The range of allowed voltage that a device is certified to handle. The upper bound of this value is the maximum.</value>
  </data>
  <data name="Property.RatedTemperature.Name[1$TnC0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>RatedTemperature</value>
  </data>
  <data name="Property.RatedTemperature.Definition[1$TnC0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The range of allowed temerature that a device is certified to handle. The upper bound of this value is the maximum.</value>
  </data>
  <data name="Property.ScreenDiameter.Name[26dY40qSWHuO00025QrE$V]" xml:space="preserve">
    <value>ScreenDiameter</value>
  </data>
  <data name="Property.ScreenDiameter.Definition[26dY40qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The diameter of the screen around a core segment (if present).</value>
  </data>
  <data name="Property.CoreIdentifier.Name[2Cb080qSWHuO00025QrE$V]" xml:space="preserve">
    <value>CoreIdentifier</value>
  </data>
  <data name="Property.CoreIdentifier.Definition[2Cb080qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The core identification used  Identifiers may be used such as by color (Black, Brown, Grey) or by number (1, 2, 3) or by IEC phase reference (L1, L2, L3) etc.</value>
  </data>
  <data name="Property.SheathColors.Name[2IYUC0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>SheathColors</value>
  </data>
  <data name="Property.SheathColors.Definition[2IYUC0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Colour of the core (derived from IEC 60757). Note that the combined color 'GreenAndYellow' shall be used only as Protective Earth (PE) conductors according to the requirements of IEC 60446.</value>
  </data>
  <data name="Property.Weight.Name[2nY7K0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Weight</value>
  </data>
  <data name="Property.Weight.Definition[2nY7K0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Weight of core kg/km.</value>
  </data>
  <data name="Property.SelfExtinguishing60332_1.Name[2sJIa0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>SelfExtinguishing60332_1</value>
  </data>
  <data name="Property.SelfExtinguishing60332_1.Definition[2sJIa0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Self Extinguishing cable/core according to IEC 60332.1.</value>
  </data>
  <data name="Property.SelfExtinguishing60332_3.Name[2xgdE0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>SelfExtinguishing60332_3</value>
  </data>
  <data name="Property.SelfExtinguishing60332_3.Definition[2xgdE0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Self Extinguishing cable/core according to IEC 60332.3.</value>
  </data>
  <data name="Property.HalogenProof.Name[311xu0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>HalogenProof</value>
  </data>
  <data name="Property.HalogenProof.Definition[311xu0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Produces small amount of smoke and irritating deaerator/gas.</value>
  </data>
  <data name="Property.FunctionReliable.Name[36$Py0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>FunctionReliable</value>
  </data>
  <data name="Property.FunctionReliable.Definition[36$Py0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Core maintain given properties/functions over a given (tested) time and conditions. According to (IEC) standard.</value>
  </data>
  <data name="Property.Standard.Name[3CMkc0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="Property.Standard.Definition[3CMkc0qSWHuO00025QrE$V]" xml:space="preserve">
    <value>The designation of the standard applicable for the definition of the core used.</value>
  </data>
</root>