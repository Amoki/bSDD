<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[11F1o0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_FilterTypeAirParticleFilter</value>
  </data>
  <data name="PSet.Definition[11F1o0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Air particle filter type attributes.</value>
  </data>
  <data name="Property.AirParticleFilterType.Name[17CVs0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>AirParticleFilterType</value>
  </data>
  <data name="Property.AirParticleFilterType.Definition[17CVs0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>A panel dry type extended surface filter is a dry-type air filter with random fiber mats or blankets in the forms of pockets, V-shaped or radial pleats, and include the following:CoarseFilter: Filter with a efficiency lower than 30% for atmosphere dust-spot.CoarseMetalScreen: Filter made of metal screen.CoarseCellFoams: Filter made of cell foams.CoarseSpunGlass: Filter made of spun glass.MediumFilter: Filter with an efficiency between 30-98% for atmosphere dust-spot.MediumElectretFilter: Filter with fine electret synthetic fibers.MediumNaturalFiberFilter: Filter with natural fibers.HEPAFilter: High efficiency particulate air filter.ULPAFilter: Ultra low penetration air filter.MembraneFilters: Filter made of membrane for certain pore diameters in flat sheet and pleated form.A renewable media with a moving curtain viscous filter are random-fiber media coated with viscous substance in roll form or curtain where fresh media is fed across the face of the filter and the dirty media is rewound onto a roll at the bottom or to into a reservoir:RollForm: Viscous filter used in roll form.AdhesiveReservoir: Viscous filter used in moving curtain form.A renewable moving curtain dry media filter is a random-fiber dry media of relatively high porosity used in moving-curtain(roll) filters.An electrical filter uses electrostatic precipitation to remove and collect particulate contaminants.</value>
  </data>
  <data name="Property.FrameMaterial.Name[1ZDPy0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>FrameMaterial</value>
  </data>
  <data name="Property.FrameMaterial.Definition[1ZDPy0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Filter frame material.</value>
  </data>
  <data name="Property.SeparationType.Name[1cC8_0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>SeparationType</value>
  </data>
  <data name="Property.SeparationType.Definition[1cC8_0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Air particulate filter media separation type.</value>
  </data>
  <data name="Property.DustHoldingCapacity.Name[1qVgk0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>DustHoldingCapacity</value>
  </data>
  <data name="Property.DustHoldingCapacity.Definition[1qVgk0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Maximum filter dust holding capacity.</value>
  </data>
  <data name="Property.FaceSurfaceArea.Name[1vGr_0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>FaceSurfaceArea</value>
  </data>
  <data name="Property.FaceSurfaceArea.Definition[1vGr_0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Face area of filter frame.</value>
  </data>
  <data name="Property.MediaExtendedArea.Name[1$qTS0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>MediaExtendedArea</value>
  </data>
  <data name="Property.MediaExtendedArea.Definition[1$qTS0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Total extended media area.</value>
  </data>
  <data name="Property.NominalCountedEfficiency.Name[25Bo60qUKHuO00025QrE$V]" xml:space="preserve">
    <value>NominalCountedEfficiency</value>
  </data>
  <data name="Property.NominalCountedEfficiency.Definition[25Bo60qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Nominal filter efficiency based the particle count concentration before and after the filter against particles with a certain size distribution.</value>
  </data>
  <data name="Property.NominalWeightedEfficiency.Name[2AZ6m0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>NominalWeightedEfficiency</value>
  </data>
  <data name="Property.NominalWeightedEfficiency.Definition[2AZ6m0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Nominal filter efficiency based the particle weight concentration before and after the filter against particles with a certain size distribution.</value>
  </data>
  <data name="Property.PressureDropCurve.Name[]" xml:space="preserve">
    <value>PressureDropCurve</value>
  </data>
  <data name="Property.PressureDropCurve.Definition[]" xml:space="preserve">
    <value>Under certain dust holding weight, DelPressure = f (fluidflowRate)</value>
  </data>
  <data name="Property.CountedEfficiencyCurve.Name[2Q2xK0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>CountedEfficiencyCurve</value>
  </data>
  <data name="Property.CountedEfficiencyCurve.Definition[2Q2xK0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Counted efficiency curve as a function of dust holding weight, efficiency = f (dust holding weight).</value>
  </data>
  <data name="Property.WeightedEfficiencyCurve.Name[2bztS0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>WeightedEfficiencyCurve</value>
  </data>
  <data name="Property.WeightedEfficiencyCurve.Definition[2bztS0qUKHuO00025QrE$V]" xml:space="preserve">
    <value>Weighted efficiency curve as a function of dust holding weight, efficiency = f (dust holding weight).</value>
  </data>
</root>