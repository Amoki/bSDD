<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3hy1C0qSGHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[3hy1C0qSGHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[3mjCS0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>参照記号</value>
  </data>
  <data name="Property.Reference.Definition[3mjCS0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>このプロジェクトにおける参照記号(例：A-1)。分類コードではなく内部で使用されるプロジェクトタイプとして使用されるもの。</value>
  </data>
  <data name="Property.BuildingID.Name[3rUNi0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>建物記号</value>
  </data>
  <data name="Property.BuildingID.Definition[3rUNi0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>建物に付与されるユニークな識別子。計画要請の際に使用される初期の一時的な識別子。この一時的な識別子は、建物が正式に登録された際に恒久的な識別子へと変更される。</value>
  </data>
  <data name="Property.IsPermanentID.Name[3wFYy0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>永久ID区分</value>
  </data>
  <data name="Property.IsPermanentID.Definition[3wFYy0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>建物IDが恒久的なIDかどうかのブーリアン値。</value>
  </data>
  <data name="Property.ConstructionMethod.Name[3$0kC0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>工事種別</value>
  </data>
  <data name="Property.ConstructionMethod.Definition[3$0kC0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>工事におけるタイプ。例：新築・リノベーション・改装等。</value>
  </data>
  <data name="Property.FireProtectionClass.Name[03Bm20qSKHuO00025QrE$V]" xml:space="preserve">
    <value>耐火等級</value>
  </data>
  <data name="Property.FireProtectionClass.Definition[03Bm20qSKHuO00025QrE$V]" xml:space="preserve">
    <value>主要な防火等級。関連する建築基準法、消防法などの国家基準を参照。</value>
  </data>
  <data name="Property.SprinklerProtection.Name[07Mnu0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>スプリンクラー防御</value>
  </data>
  <data name="Property.SprinklerProtection.Definition[07Mnu0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>スプリンクラー設備の有無を示すブーリアン値。</value>
  </data>
  <data name="Property.SprinklerProtectionAutomatic.Name[0C7z80qSKHuO00025QrE$V]" xml:space="preserve">
    <value>スプリンクラー防御自動区分</value>
  </data>
  <data name="Property.SprinklerProtectionAutomatic.Definition[0C7z80qSKHuO00025QrE$V]" xml:space="preserve">
    <value>スプリンクラー設備が自動かどうか示すブーリアン値。</value>
  </data>
  <data name="Property.OccupancyType.Name[0GI__0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>占有者タイプ</value>
  </data>
  <data name="Property.OccupancyType.Definition[0GI__0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>占有者のタイプ。建築基準法に準拠。</value>
  </data>
  <data name="Property.GrossPlannedArea.Name[0L4AE0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>計画グロス面積</value>
  </data>
  <data name="Property.GrossPlannedArea.Definition[0L4AE0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>計画されたグロス面積。建物計画に際に使用。</value>
  </data>
  <data name="Property.NetPlannedArea.Name[0PFC40qSKHuO00025QrE$V]" xml:space="preserve">
    <value>計画ネット面積</value>
  </data>
  <data name="Property.NetPlannedArea.Definition[0PFC40qSKHuO00025QrE$V]" xml:space="preserve">
    <value>計画されたネット面積。建物計画に際に使用。（通常は、柱型等を抜いた面積となる）</value>
  </data>
  <data name="Property.NumberOfStoreys.Name[0TQDw0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>階数</value>
  </data>
  <data name="Property.NumberOfStoreys.Definition[0TQDw0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>建物階の数。IfcBuildingStoreyの数とは関係なく扱う。</value>
  </data>
  <data name="Property.YearOfConstruction.Name[0XbFm0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>施工年</value>
  </data>
  <data name="Property.YearOfConstruction.Definition[0XbFm0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>施工の年。竣工の予想年も含む。</value>
  </data>
  <data name="Property.YearOfLastRefurbishment.Name[0cMR00qSKHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.YearOfLastRefurbishment.Definition[0cMR00qSKHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.IsLandmarked.Name[0gXSs0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>ランドマーク区分</value>
  </data>
  <data name="Property.IsLandmarked.Definition[0gXSs0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>この建物は歴史的な建物かどうかを示すブーリアン値。</value>
  </data>
</root>