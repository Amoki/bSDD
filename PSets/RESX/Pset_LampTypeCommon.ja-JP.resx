<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3lbf20qUeHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[3lbf20qUeHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[3rZ760qUeHuO00025QrE$V]" xml:space="preserve">
    <value>参照</value>
  </data>
  <data name="Property.Reference.Definition[3rZ760qUeHuO00025QrE$V]" xml:space="preserve">
    <value>当該プロジェクトで定義する形式の参照ID（例：A-1)、承認された分類に存在しないときに使用される。</value>
  </data>
  <data name="Property.Status.Name[3zvAo0qUeHuO00025QrE$V]" xml:space="preserve">
    <value>状態</value>
  </data>
  <data name="Property.Status.Definition[3zvAo0qUeHuO00025QrE$V]" xml:space="preserve">
    <value>要素（主にリノベーションまたは改修プロジェクトにおいて）の状態。 状態は、「新規(New)」－新しく追加される要素。「既存」－要素は存在し、かつ残りもの。「破壊」－要素は存在したが、廃棄されるもの。「一時的」－一時的に存在する要素（一時的にサポートしている構造のようなもの）。</value>
  </data>
  <data name="Property.ContributedLuminousFlux.Name[0Fna_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>光束</value>
  </data>
  <data name="Property.ContributedLuminousFlux.Definition[0Fna_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>光束は放射束を光度測定したもので、たとえば、光源からの発光の量である。光束は全室内、または室内の一部（立体角の部分的な光束）で計測する。全ての光度測定の項目は高速の派生である。光束は単位ルーメンで計られる。光束は各ランプからの値で与えられる。</value>
  </data>
  <data name="Property.LightEmitterNominalPower.Name[0Ll320qUiHuO00025QrE$V]" xml:space="preserve">
    <value>照明器具ワット数</value>
  </data>
  <data name="Property.LightEmitterNominalPower.Definition[0Ll320qUiHuO00025QrE$V]" xml:space="preserve">
    <value>発光するための定格ワット数</value>
  </data>
  <data name="Property.LampMaintenanceFactor.Name[0SIgW0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>保守率</value>
  </data>
  <data name="Property.LampMaintenanceFactor.Definition[0SIgW0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>回復不可能な光量減少が原因の光源自体の光束の低下、たとえば照明器具の老朽化や汚れによる光量の減少。</value>
  </data>
  <data name="Property.LampBallastType.Name[0YsH_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>安定期のタイプ</value>
  </data>
  <data name="Property.LampBallastType.Definition[0YsH_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>安定器は使用中の過電流を抑え、蛍光ランプの起動に必要な高い電圧を供給し、ガス放電を安定させる。安定器は蛍光灯、水銀灯、メタルハライドランプ、高圧ナトリウムランプ等の放電灯使用する時に必要となる。磁気式安定器はランプに流れる電流の制限のために、直列に接続された自己誘導の手法を用いている電流と出力から照明の効率運用の結果がわかる。特別な設計の安定器は全ての照明の光束、色の見え方、寿命の要求に答える。蛍光灯用の磁気式安定器にはKVG従来型とVVG省電力型の2種類がある。省電力型安定器は光効率で、安定器での損失の低減及び低熱負荷になっている。電子式安定器は蛍光灯を高周波で安定的に点灯させる。</value>
  </data>
  <data name="Property.LampCompensationType.Name[0oyFy0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>ランプ補正</value>
  </data>
  <data name="Property.LampCompensationType.Definition[0oyFy0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>力率の改善と高調波の抑制のために使用される補正</value>
  </data>
  <data name="Property.ColorAppearance.Name[11rx60qUiHuO00025QrE$V]" xml:space="preserve">
    <value>色の見え方</value>
  </data>
  <data name="Property.ColorAppearance.Definition[11rx60qUiHuO00025QrE$V]" xml:space="preserve">
    <value>DIN（ドイツ規格協会）とCIE（国際照明委員会）の両方の規格で、人工照明は色の見え方で分類される。人の目には全て白く見えてくる、その差異は直接比較することにより判別することが可能である。視機能は色の見え方の差異に直接影響はしない。</value>
  </data>
  <data name="Property.Spectrum.Name[1BOHc0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>波長域</value>
  </data>
  <data name="Property.Spectrum.Definition[1BOHc0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>波長を考慮して合成することを放射スペクトルで表現する。光は可視の電磁波の一種で、訳380～780nmの範囲の波長の放射である。色の変化は紫から藍色、青、緑、黄色、オレンジ、赤の範囲に相当する。これらの色は連続する波長で、お互いに合成した波長領域である。</value>
  </data>
  <data name="Property.ColorTemperature.Name[1PhpM0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>色温度</value>
  </data>
  <data name="Property.ColorTemperature.Definition[1PhpM0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>放射源の色温度は黒体、または完全放射体の色温度にて定義され、与えられた放射の色度と等しい黒体の温度のこと。与えられた放射の色度が黒体放射軌跡上にない場合に、相対分光分布を黒体放射に近似する。最も一般的な人工光源の色温度の範囲は、3000K以下（暖白）から4000K（中間）で、5000k以上は昼光。</value>
  </data>
  <data name="Property.ColorRenderingIndex.Name[1VfHQ0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>演色評価数</value>
  </data>
  <data name="Property.ColorRenderingIndex.Definition[1VfHQ0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>同じ色温度の基準光源で、規定された8色の試験色票での光源による色彩の再表現を比較する。CRIの評価スケールは1～100で、基準光源の場合を100とする。</value>
  </data>
</root>