<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2Irgu0qSaHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[2Irgu0qSaHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[2Ncs80qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Référence</value>
  </data>
  <data name="Property.Reference.Definition[2Ncs80qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Identification de référence pour ce type spécifique à ce projet, c'est-à-dire type'A-1', fourni à partir du moment où, s'il n'y a pas de référence de classification par rapport à un système de classification reconnu et en usage.</value>
  </data>
  <data name="Property.Status.Name[2Umd00qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Etat</value>
  </data>
  <data name="Property.Status.Definition[2Umd00qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Etat de l'élément, utilisé avant tout pour les projets de rénovation et réaménagement. L'état assigné peut être "Nouveau" - l'élément prévu pour du neuf, "Existant" - l'élément existait et est maintenu, "Démoli" - l'élément existait mais doit être démoli/supprimé, "Provisoire" - l'élément existera à titre provisoire seulement (comme un support structurel par exemple).</value>
  </data>
  <data name="Property.OperationalTemperatureRange.Name[2j48m0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>PlageTemperatureFonctionnelle</value>
  </data>
  <data name="Property.OperationalTemperatureRange.Definition[2j48m0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Plage de température fonctionnelle admissible.</value>
  </data>
  <data name="Property.AirflowRateRange.Name[2qq320qSaHuO00025QrE$V]" xml:space="preserve">
    <value>PlageDébitAéraulique</value>
  </data>
  <data name="Property.AirflowRateRange.Definition[2qq320qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Plage possible de débit aéraulique pouvant être délivré. Pour les cas où il n'y a pas de débit à travers la batterie (par ex. batterie électrique en plancher), alors la valeur est zéro.</value>
  </data>
  <data name="Property.NominalSensibleCapacity.Name[2xNgW0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>PuissanceSensibleNominale</value>
  </data>
  <data name="Property.NominalSensibleCapacity.Definition[2xNgW0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Puissance sensible nominale.</value>
  </data>
  <data name="Property.NominalLatentCapacity.Name[308rm0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>PuissanceLatenteNominale</value>
  </data>
  <data name="Property.NominalLatentCapacity.Definition[308rm0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Puissance latente nominale.</value>
  </data>
  <data name="Property.NominalUA.Name[35WAQ0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>UANominale</value>
  </data>
  <data name="Property.NominalUA.Definition[35WAQ0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Valeur nominale du coefficient de transmission thermique totale.</value>
  </data>
  <data name="Property.PlacementType.Name[39hCG0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>TypeImplantation</value>
  </data>
  <data name="Property.PlacementType.Definition[39hCG0qSaHuO00025QrE$V]" xml:space="preserve">
    <value>Précise l'implantation de la batterie.PLANCHER indique que c'est un plancher chauffant (si le type de batterie is BATTERIEEAUCHAUDE ou CABLECHAUFFANTLECTRIQUE);PLAFOND indique un plafond rafraïchissant (si le type de la batterie est BATTERIEEAUFROIDE); UNITE indique que la batterie fait partie d'une unité de chauffage ou de refroidissement, tel que poutre froide, etc.</value>
  </data>
</root>