<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2Enzn3X1rFDP_2300j3ncG]" xml:space="preserve">
    <value>Pset_ProtectiveDeviceOccurrence</value>
  </data>
  <data name="PSet.Definition[2Enzn3X1rFDP_2300j3ncG]" xml:space="preserve">
    <value>Properties that are applied to an occurrence of a protective device.</value>
  </data>
  <data name="Property.PoleUsage.Name[01jtMQQzrBYQn9FaxWGuLI]" xml:space="preserve">
    <value>PoleUsage</value>
  </data>
  <data name="Property.PoleUsage.Definition[01jtMQQzrBYQn9FaxWGuLI]" xml:space="preserve">
    <value>Pole usage.</value>
  </data>
  <data name="Property.LongTimeFunction.Name[1BaXJ5q$v22vulz2WfcIHF]" xml:space="preserve">
    <value>LongTimeFunction</value>
  </data>
  <data name="Property.LongTimeFunction.Definition[1BaXJ5q$v22vulz2WfcIHF]" xml:space="preserve">
    <value>Applying long time functionA flag indicating that the long time function (i.e. the thermal tripping) of the device is used. The value should be set to TRUE for all devices except those that allows the Long time function of the device not to be used.</value>
  </data>
  <data name="Property.ShortTimeFunction.Name[2oOWuNfqXDx8_DtPmlGsgW]" xml:space="preserve">
    <value>ShortTimeFunction</value>
  </data>
  <data name="Property.ShortTimeFunction.Definition[2oOWuNfqXDx8_DtPmlGsgW]" xml:space="preserve">
    <value>Applying short time function A flag indicating that the short time function of the device is used. The value should be set to FALSE for devices not having a short time function, or if the short time function is not selected to be used.</value>
  </data>
  <data name="Property.ShortTimei2tFunction.Name[0uFfGhb59E786CdtQIpb0c]" xml:space="preserve">
    <value>ShortTimei2tFunction</value>
  </data>
  <data name="Property.ShortTimei2tFunction.Definition[0uFfGhb59E786CdtQIpb0c]" xml:space="preserve">
    <value>Applying short time i2t function. A flag indicating that the I2t short time function of the device is used. The value should be set to TRUE only if the I2t function  is explicitly selected for the device.</value>
  </data>
  <data name="Property.GroundFaultFunction.Name[0c$BMHJDT4zRLNwJLWg_79]" xml:space="preserve">
    <value>GroundFaultFunction</value>
  </data>
  <data name="Property.GroundFaultFunction.Definition[0c$BMHJDT4zRLNwJLWg_79]" xml:space="preserve">
    <value>Applying ground fault function. A flag indicating that the ground fault function of the device is used. The value should be set to FALSE for devices not having a ground fault function, or if the ground fault function is not selected to be used.</value>
  </data>
  <data name="Property.GroundFaulti2tFunction.Name[0R5m3XVKHE6wAwmTIhvFw$]" xml:space="preserve">
    <value>GroundFaulti2tFunction</value>
  </data>
  <data name="Property.GroundFaulti2tFunction.Definition[0R5m3XVKHE6wAwmTIhvFw$]" xml:space="preserve">
    <value>Applying ground fault i2t function. A flag indicating that the I2t ground fault function of the device is used. The value should be set to TRUE only if the I2t function is explicitly selected for the device.</value>
  </data>
  <data name="Property.LongTimeCurrentSetValue.Name[1sniGNXi16lvR$CnA1f_H4]" xml:space="preserve">
    <value>LongTimeCurrentSetValue</value>
  </data>
  <data name="Property.LongTimeCurrentSetValue.Definition[1sniGNXi16lvR$CnA1f_H4]" xml:space="preserve">
    <value>Long time current set value. The set value of the long time tripping current if adjustable.</value>
  </data>
  <data name="Property.ShortTimeCurrentSetValue.Name[1Vc2Rbk654ygjJae_8TWCD]" xml:space="preserve">
    <value>ShortTimeCurrentSetValue</value>
  </data>
  <data name="Property.ShortTimeCurrentSetValue.Definition[1Vc2Rbk654ygjJae_8TWCD]" xml:space="preserve">
    <value>Short time current set value. The set value of the long time tripping current if adjustable.</value>
  </data>
  <data name="Property.InstantaneousCurrentSetValue.Name[2CnGkuCGT28ee_bIaab9OF]" xml:space="preserve">
    <value>InstantaneousCurrentSetValue</value>
  </data>
  <data name="Property.InstantaneousCurrentSetValue.Definition[2CnGkuCGT28ee_bIaab9OF]" xml:space="preserve">
    <value>Instantaneous current set value. The set value of the instantaneous tripping current if adjustable.</value>
  </data>
  <data name="Property.GroundFaultCurrentSetValue.Name[0XLools0fEYhaAhq59actK]" xml:space="preserve">
    <value>GroundFaultCurrentSetValue</value>
  </data>
  <data name="Property.GroundFaultCurrentSetValue.Definition[0XLools0fEYhaAhq59actK]" xml:space="preserve">
    <value>Ground fault current set value. The set value of the ground tripping current if adjustable.</value>
  </data>
  <data name="Property.LongTimeDelay.Name[1Urg7JDBLCK8s4cOxG6jHZ]" xml:space="preserve">
    <value>LongTimeDelay</value>
  </data>
  <data name="Property.LongTimeDelay.Definition[1Urg7JDBLCK8s4cOxG6jHZ]" xml:space="preserve">
    <value>Long time delay. The set value of the long time time-delay if adjustable.</value>
  </data>
  <data name="Property.ShortTimeTrippingTime.Name[1qwcI$tpHFwh8ABUT1M6mz]" xml:space="preserve">
    <value>ShortTimeTrippingTime</value>
  </data>
  <data name="Property.ShortTimeTrippingTime.Definition[1qwcI$tpHFwh8ABUT1M6mz]" xml:space="preserve">
    <value>Short time tripping time. The set value of the short time tripping time if adjustable.</value>
  </data>
  <data name="Property.InstantaneousTrippingTime.Name[1DLgb0LdL4S9H249DjFKhh]" xml:space="preserve">
    <value>InstantaneousTrippingTime</value>
  </data>
  <data name="Property.InstantaneousTrippingTime.Definition[1DLgb0LdL4S9H249DjFKhh]" xml:space="preserve">
    <value>Instantaneous tripping time. The set value of the instantaneous tripping time if adjustable.</value>
  </data>
  <data name="Property.GroundFaultTrippingTime.Name[3Sjjxvqif8cgqMTDk1LcJJ]" xml:space="preserve">
    <value>GroundFaultTrippingTime</value>
  </data>
  <data name="Property.GroundFaultTrippingTime.Definition[3Sjjxvqif8cgqMTDk1LcJJ]" xml:space="preserve">
    <value>Ground fault tripping time. The set value of the ground fault tripping current if adjustable.</value>
  </data>
</root>