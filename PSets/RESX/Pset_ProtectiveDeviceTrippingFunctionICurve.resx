<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2ei9S0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ProtectiveDeviceTrippingFunctionICurve</value>
  </data>
  <data name="PSet.Definition[2ei9S0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Tripping functions are applied to electronic tripping units (i.e. tripping units having type property sets for electronic tripping defined). They are not applied to thermal, thermal magnetic or RCD tripping units.This property set represent the instantaneous time protection (I-curve) of an electronic protection device.</value>
  </data>
  <data name="Property.IsSelectable.Name[2iH1u0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>IsSelectable</value>
  </data>
  <data name="Property.IsSelectable.Definition[2iH1u0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Indication whether the S-function can be switched off or not.</value>
  </data>
  <data name="Property.NominalCurrentAdjusted.Name[2oEVy0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>NominalCurrentAdjusted</value>
  </data>
  <data name="Property.NominalCurrentAdjusted.Definition[2oEVy0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>An indication if the tripping currents of the short time protection is related to the nominal current multiplied with the actual setting of the current adjustment, if any, of the long time protection part of the protective device, or not.</value>
  </data>
  <data name="Property.ReleaseCurrent.Name[2yM$s0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>ReleaseCurrent</value>
  </data>
  <data name="Property.ReleaseCurrent.Definition[2yM$s0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The release current in [x In] for the initial tripping of the S-function.</value>
  </data>
  <data name="Property.ReleaseTime.Name[32KTw0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>ReleaseTime</value>
  </data>
  <data name="Property.ReleaseTime.Definition[32KTw0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The release time in [s] for the initial tripping of the relevant part. This time indicates that for current lower than the indicated release current, the tripping time will be longer than the indicated release time. The value is given as a mean value.</value>
  </data>
  <data name="Property.CurrentTolerance1.Name[37hoa0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>CurrentTolerance1</value>
  </data>
  <data name="Property.CurrentTolerance1.Definition[37hoa0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The tolerance for the current of time/current-curve in [%].</value>
  </data>
  <data name="Property.CurrentToleranceLimit1.Name[3G1sG0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>CurrentToleranceLimit1</value>
  </data>
  <data name="Property.CurrentToleranceLimit1.Definition[3G1sG0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The time limit in [s] limiting the application of CurrentTolerance1, if any. If the value is set to 0, the value of the CurrentTolerance1 is valid for the whole time/current-curve.</value>
  </data>
  <data name="Property.CurrentTolerance2.Name[3PaCm0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>CurrentTolerance2</value>
  </data>
  <data name="Property.CurrentTolerance2.Definition[3PaCm0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The tolerance for the current of time/current-curve in [%] valid for times above CurrentTolereanceLimit1.</value>
  </data>
  <data name="Property.IsCurrentTolerancePositiveOnly.Name[3YWPs0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>IsCurrentTolerancePositiveOnly</value>
  </data>
  <data name="Property.IsCurrentTolerancePositiveOnly.Definition[3YWPs0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Indication whether the value of  CurrentTolerance1 is provided as a positive tolereance only  or not. If not, the value is proved as a pluss/minus tolerance.</value>
  </data>
  <data name="Property.TimeTolerance1.Name[3eTtw0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>TimeTolerance1</value>
  </data>
  <data name="Property.TimeTolerance1.Definition[3eTtw0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The tolerance for the time of time/current-curve in [%].</value>
  </data>
  <data name="Property.TimeToleranceLimit1.Name[3kRL_0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>TimeToleranceLimit1</value>
  </data>
  <data name="Property.TimeToleranceLimit1.Definition[3kRL_0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The current limit in [x In] limiting the application of TimeTolerance1, if any. If the value is set to 0, the value of the TimeTolerance1 is valid for the whole time/current-curve.</value>
  </data>
  <data name="Property.TimeTolerance2.Name[3pCXE0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>TimeTolerance2</value>
  </data>
  <data name="Property.TimeTolerance2.Definition[3pCXE0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>The tolerance for the time of the time/current-curve in [%] valid for currents above TimeToleranceLimit1.</value>
  </data>
  <data name="Property.IsTimeTolerancePositiveOnly.Name[3vm8i0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>IsTimeTolerancePositiveOnly</value>
  </data>
  <data name="Property.IsTimeTolerancePositiveOnly.Definition[3vm8i0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Indication whether the value of  TimeTolerance1 is provided as a positive tolereance only  or not. If not, the value is proved as a pluss/minus tolerance.</value>
  </data>
  <data name="Property.MaxAdjustmentX_ICS.Name[3$jcm0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>MaxAdjustmentX_ICS</value>
  </data>
  <data name="Property.MaxAdjustmentX_ICS.Definition[3$jcm0qVeHuO00025QrE$V]" xml:space="preserve">
    <value>Provides the maximum setting value for the available current adjustment in relation to theIcs breaking capacity of the protection device of which the actual tripping unit is a part of. The value is not asserted unless the instantaneous time protection is.</value>
  </data>
  <data name="Property.IsOffWhenSFunctionOn.Name[1u4aqXMuX9mvafWitqjXfW]" xml:space="preserve">
    <value>IsOffWhenSFunctionOn</value>
  </data>
  <data name="Property.IsOffWhenSFunctionOn.Definition[1u4aqXMuX9mvafWitqjXfW]" xml:space="preserve">
    <value>Indication whether the I-function is automatically switched off when the S-function is switched on.</value>
  </data>
</root>