<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0UTIo0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ValveTypeCommon</value>
  </data>
  <data name="PSet.Definition[0UTIo0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Valve type common attributes.</value>
  </data>
  <data name="Property.Reference.Name[0Y2BE0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[0Y2BE0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Reference ID for this specified type in this project (e.g. type 'A-1').</value>
  </data>
  <data name="Property.Status.Name[]" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Property.Status.Definition[]" xml:space="preserve">
    <value>PSetManager.PropertyType</value>
  </data>
  <data name="Property.ValvePattern.Name[0d$fI0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>ValvePattern</value>
  </data>
  <data name="Property.ValvePattern.Definition[0d$fI0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The configuration of the ports of a valve according to either the linear route taken by a fluid flowing through the valve or by the number of ports where:SINGLEPORT: Valve that has a single entry port from the system that it serves, the exit port being to the surrounding environment.ANGLED_2_PORT: Valve in which the direction of flow is changed through 90 degrees.STRAIGHT_2_PORT: Valve in which the flow is straight through.STRAIGHT_3_PORT: Valve with three separate ports.CROSSOVER_4_PORT: Valve with 4 separate ports.</value>
  </data>
  <data name="Property.ValveOperation.Name[0u5dG0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>ValveOperation</value>
  </data>
  <data name="Property.ValveOperation.Definition[0u5dG0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The method of valve operation where:DROPWEIGHT: A valve that is closed by the action of a weighted lever being released, the weight normally being prevented from dropping by being held by a wire, the closure normally being made by the action of heat on a fusible link in the wireFLOAT: A valve that is opened and closed by the action of a float that rises and falls with water level. The float may be a ball attached to a lever or other mechanismHYDRAULIC: A valve that is opened and closed by hydraulic actuationLEVER: A valve that is opened and closed by the action of a lever rotating the gate within the valve.LOCKSHIELD: A valve that requires the use of a special lockshield key for opening and closing, the operating mechanism being protected by a shroud during normal operation.MOTORIZED: A valve that is opened and closed by the action of an electric motor on an actuatorPNEUMATIC: A valve that is opened and closed by pneumatic actuationSOLENOID: A valve that is normally held open by a magnetic field in a coil acting on the gate but that is closed immediately if the electrical current generating the magnetic field is removed. SPRING: A valve that is normally held in position by the pressure of a spring on a plate but that may be caused to open if the pressure of the fluid is sufficient to overcome the spring pressure. THERMOSTATIC: A valve in which the ports are opened or closed to maintain a required predetermined temperature.WHEEL: A valve that is opened and closed by the action of a wheel moving the gate within the valve.</value>
  </data>
  <data name="Property.ValveMechanism.Name[1Hjxk0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>ValveMechanism</value>
  </data>
  <data name="Property.ValveMechanism.Definition[1Hjxk0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The mechanism by which the valve function is achieved where:BALL: Valve that has a ported ball that can be turned relative to the body seat ports.BUTTERFLY: Valve in which a streamlined disc pivots about a diametric axis.CONFIGUREDGATE: Screwdown valve in which the closing gate is shaped in a configured manner to have a more precise control of pressure and flow change across the valve.GLAND: Valve with a tapered seating, in which a rotatable plug is retained by means of a gland and gland packing.GLOBE: Screwdown valve that has a spherical body.LUBRICATEDPLUG: Plug valve in which a lubricant is injected under pressure between the plug face and the body.NEEDLE: Valve for regulating the flow in or from a pipe, in which a slender cone moves along the axis of flow to close against a fixed conical seat.PARALLELSLIDE: Screwdown valve that has a machined plate that slides in formed grooves to form a seal.PLUG: Valve that has a ported plug that can be turned relative to the body seat ports.WEDGEGATE: Screwdown valve that has a wedge shaped plate fitting into tapered guides to form a seal.</value>
  </data>
  <data name="Property.Size.Name[1g9zO0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Property.Size.Definition[1g9zO0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The size of the connection to the valve (or to each connection for faucets, mixing valves, etc.).</value>
  </data>
  <data name="Property.TestPressure.Name[1uTV80qXGHuO00025QrE$V]" xml:space="preserve">
    <value>TestPressure</value>
  </data>
  <data name="Property.TestPressure.Definition[1uTV80qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The maximum pressure to which the valve has been subjected under test.</value>
  </data>
  <data name="Property.WorkingPressure.Name[1_QzC0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>WorkingPressure</value>
  </data>
  <data name="Property.WorkingPressure.Definition[1_QzC0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>The normally expected maximum working pressure of the valve.</value>
  </data>
  <data name="Property.FlowCoefficient.Name[24ORG0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>FlowCoefficient</value>
  </data>
  <data name="Property.FlowCoefficient.Definition[24ORG0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Flow coefficient (the quantity of fluid that passes through a fully open valve at unit pressure drop), typically expressed as the Kv or Cv value for the valve.</value>
  </data>
  <data name="Property.CloseOffRating.Name[2ALvK0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>CloseOffRating</value>
  </data>
  <data name="Property.CloseOffRating.Definition[2ALvK0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Close off rating.</value>
  </data>
</root>