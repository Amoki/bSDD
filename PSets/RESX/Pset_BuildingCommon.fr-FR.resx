<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3hy1C0qSGHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[3hy1C0qSGHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[3mjCS0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[3mjCS0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>Référence à l'identifiant d'un type spécifié dans le contexte de ce projet (exemple : "type A1"). A fournir s'il n'y a pas de référence à une classification en usage.</value>
  </data>
  <data name="Property.BuildingID.Name[3rUNi0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>IdBatiment</value>
  </data>
  <data name="Property.BuildingID.Definition[3rUNi0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>Un identifiant unique attribué au bâtiment. Un identifiant temporaire est attribué au moment de la programmation. Il est ensuite remplacé par un identifiant permanent lorsque le bâtiment est enregistré dans une base de données de nature règlementaire.</value>
  </data>
  <data name="Property.IsPermanentID.Name[3wFYy0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>IdPermanent</value>
  </data>
  <data name="Property.IsPermanentID.Definition[3wFYy0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>Indique si l'identifiant attribuée au bâtiment est permanent (=VRAI) ou temporaire (=FAUX).</value>
  </data>
  <data name="Property.ConstructionMethod.Name[3$0kC0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>RisqueIncendieUsagePrincipal</value>
  </data>
  <data name="Property.ConstructionMethod.Definition[3$0kC0qSGHuO00025QrE$V]" xml:space="preserve">
    <value>Le type d'intervention sur le bâtiment : construction neuve, rénovation, réhabilitation, etc.</value>
  </data>
  <data name="Property.FireProtectionClass.Name[03Bm20qSKHuO00025QrE$V]" xml:space="preserve">
    <value>RisqueIncendieUsageSecondaire</value>
  </data>
  <data name="Property.FireProtectionClass.Definition[03Bm20qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Classe principale de protection contre le risque incendie, selon la réglementation nationale.</value>
  </data>
  <data name="Property.SprinklerProtection.Name[07Mnu0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>ProtectionParSprinkler</value>
  </data>
  <data name="Property.SprinklerProtection.Definition[07Mnu0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Indication selon laquelle ce bâtiment bénéficie d'une protection par sprinkler (VRAI) ou non (FAUX).</value>
  </data>
  <data name="Property.SprinklerProtectionAutomatic.Name[0C7z80qSKHuO00025QrE$V]" xml:space="preserve">
    <value>ProtectionAutomatiqueParSprinkler</value>
  </data>
  <data name="Property.SprinklerProtectionAutomatic.Definition[0C7z80qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Indication selon laquelle ce bâtiment bénéficie d'une protection automatique par sprinkler (VRAI) ou non (FAUX).</value>
  </data>
  <data name="Property.OccupancyType.Name[0GI__0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>TypeOccupation</value>
  </data>
  <data name="Property.OccupancyType.Definition[0GI__0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Type d'occupation. Est défini selon le Code National en vigueur.</value>
  </data>
  <data name="Property.GrossPlannedArea.Name[0L4AE0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Surface programmée brute</value>
  </data>
  <data name="Property.GrossPlannedArea.Definition[0L4AE0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Surface programmée brute totale du bâtiment. Telle que définie lors de la programmation.</value>
  </data>
  <data name="Property.NetPlannedArea.Name[0PFC40qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Surface programmée nette</value>
  </data>
  <data name="Property.NetPlannedArea.Definition[0PFC40qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Surface programmée nette totale du bâtiment. Telle que définie lors de la programmation.</value>
  </data>
  <data name="Property.NumberOfStoreys.Name[0TQDw0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>NombreNiveaux</value>
  </data>
  <data name="Property.NumberOfStoreys.Definition[0TQDw0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Le nombre de niveaux dans un bâtiment, à indiquer lorsque la classe IfcBuildingStorey n'est pas  utilisée. Il est préférable de créer des instances d'IfcBuildingStorey et d'en déduire le nombre de niveaux plutôt que de saisir cette propriété.</value>
  </data>
  <data name="Property.YearOfConstruction.Name[0XbFm0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>AnneeConstruction</value>
  </data>
  <data name="Property.YearOfConstruction.Definition[0XbFm0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Année de construction de ce bâtiment, incluant l'année de parfait achèvement.</value>
  </data>
  <data name="Property.YearOfLastRefurbishment.Name[0cMR00qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Année de la dernière rénovation</value>
  </data>
  <data name="Property.YearOfLastRefurbishment.Definition[0cMR00qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Année de la dernière rénovation majeure ou de la reconstruction du bâtiment.</value>
  </data>
  <data name="Property.IsLandmarked.Name[0gXSs0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>ClasseMonumentHistorique</value>
  </data>
  <data name="Property.IsLandmarked.Definition[0gXSs0qSKHuO00025QrE$V]" xml:space="preserve">
    <value>Indique si le bâtiment est classé aux monuments historiques (VRAI) ou non (FAUX), ou si l'information n'est pas connue.</value>
  </data>
</root>