<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2tD8c0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ControllerTypeProportional</value>
  </data>
  <data name="PSet.Definition[2tD8c0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Properties for signal handling for an proportional controller taking setpoint and feedback inputs and creating a single valued output. HISTORY: In IFC4, SignalFactor1, SignalFactor2 and SignalFactor3 changed to ProportionalConstant, IntegralConstant and DerivativeConstant.  SignalTime1 and SignalTime2 changed to SignalTimeIncrease and SignalTimeDecrease.</value>
  </data>
  <data name="Property.ControlType.Name[2zAcg0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>ControlType</value>
  </data>
  <data name="Property.ControlType.Definition[2zAcg0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The type of signal modification.PROPORTIONAL: Output is proportional to the control error. The gain of a proportional control (Kp) will have the effect of reducing the rise time and reducing , but never eliminating, the steady-state error of the variable controlled. PROPORTIONALINTEGRAL: Part of the output is proportional to the control error and part is proportional to the time integral of the control error. Adding the gain of an integral control (Ki) will have the effect of eliminating the steady-state error of the variable controlled, but it may make the transient response worse. PROPORTIONALINTEGRALDERIVATIVE: Part of the output is proportional to the control error, part is proportional to the time integral of the control error and part is proportional to the time derivative of the control error. Adding the gain of a derivative control (Kd) will have the effect of increasing the stability of the system, reducing the overshoot, and improving the transient response of the variable controlled.</value>
  </data>
  <data name="Property.Labels.Name[3C4Hq0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Labels</value>
  </data>
  <data name="Property.Labels.Definition[3C4Hq0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Table mapping values to labels, where such labels indicate transition points such as 'Hi', 'Lo', 'HiHi', or 'LoLo'.</value>
  </data>
  <data name="Property.Range.Name[3KQLW0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="Property.Range.Definition[3KQLW0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The physical range of values.</value>
  </data>
  <data name="Property.Value.Name[3QNpa0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Property.Value.Definition[3QNpa0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The expected range and default value.  While the property data type is IfcReal (to support all cases including when the units are unknown), a unit may optionally be provided to indicate the measure and unit.</value>
  </data>
  <data name="Property.ProportionalConstant.Name[3XXaS0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>ProportionalConstant</value>
  </data>
  <data name="Property.ProportionalConstant.Definition[3XXaS0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The proportional gain factor of the controller (usually referred to as Kp).</value>
  </data>
  <data name="Property.IntegralConstant.Name[3cuv60qSqHuO00025QrE$V]" xml:space="preserve">
    <value>IntegralConstant</value>
  </data>
  <data name="Property.IntegralConstant.Definition[3cuv60qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The integral gain factor of the controller (usually referred to as Ki).  Asserted where ControlType is PROPORTIONALINTEGRAL or PROPORTIONALINTEGRALDERIVATIVE.</value>
  </data>
  <data name="Property.DerivativeConstant.Name[3hg4M0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>DerivativeConstant</value>
  </data>
  <data name="Property.DerivativeConstant.Definition[3hg4M0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>The derivative gain factor of the controller (usually referred to as Kd).  Asserted where ControlType is PROPORTIONALINTEGRALDERIVATIVE.</value>
  </data>
  <data name="Property.SignalTimeIncrease.Name[3oDhq0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>SignalTimeIncrease</value>
  </data>
  <data name="Property.SignalTimeIncrease.Definition[3oDhq0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Time factor used for exponential increase.</value>
  </data>
  <data name="Property.SignalTimeDecrease.Name[3tb0U0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>SignalTimeDecrease</value>
  </data>
  <data name="Property.SignalTimeDecrease.Definition[3tb0U0qSqHuO00025QrE$V]" xml:space="preserve">
    <value>Time factor used for exponential decrease.</value>
  </data>
</root>