<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3dVbDjY5v9nR9aqiLpPqXH]" xml:space="preserve">
    <value>Flächenbelag</value>
  </data>
  <data name="PSet.Definition[3dVbDjY5v9nR9aqiLpPqXH]" xml:space="preserve">
    <value>Eigenschaften der Bekleidungen des Raumes. Diese Eigenschaften werden als Anforderungen in frühen Phasen im Raumprogramm geführt und können für spätere Phasen als Informationen für das Raumbuch dienen, falls die Bekleidungen nicht als eigenständige Elemen</value>
  </data>
  <data name="Property.FloorCovering.Name[1ZCFyE_C1Aq8q46k1ChiTE]" xml:space="preserve">
    <value>Bodenbelag</value>
  </data>
  <data name="Property.FloorCovering.Definition[1ZCFyE_C1Aq8q46k1ChiTE]" xml:space="preserve">
    <value>Angabe des Materials für den Bodenbelag. Diese Angabe wird im Raumbuch verwendet und oft im Raumstempel angezeigt.Die Materialangabe wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = FLOORING) für den Bodenbelag dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialangabe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.FloorCoveringThickness.Name[3JDU0MU0PFnQqTeizCCakU]" xml:space="preserve">
    <value>Dicke des Bodenbelags</value>
  </data>
  <data name="Property.FloorCoveringThickness.Definition[3JDU0MU0PFnQqTeizCCakU]" xml:space="preserve">
    <value>Angabe der Dicke der Materialschichten für den Bodenbelag. Der Dickenparameter wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = FLOORING) für den Bodenbelag dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialdicke des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.WallCovering.Name[2MPLET$kT9q8sZ_WRZ6MJx]" xml:space="preserve">
    <value>Wandbekleidung</value>
  </data>
  <data name="Property.WallCovering.Definition[2MPLET$kT9q8sZ_WRZ6MJx]" xml:space="preserve">
    <value>Angabe des Materials für die Wandbekleidung, oder den Wandbelag Diese Angabe wird im Raumbuch verwendet und oft im Raumstempel angezeigt.Die Materialangabe wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = CLADDING) für die Wandbekleidung dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialangabe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.WallCoveringThickness.Name[2p3rAp$_vC_xpAyiuqnoNL]" xml:space="preserve">
    <value>Dicke der Wandbekleidung</value>
  </data>
  <data name="Property.WallCoveringThickness.Definition[2p3rAp$_vC_xpAyiuqnoNL]" xml:space="preserve">
    <value>Angabe der Dicke der Materialschichten für die Wandbekleidung. Der Dickenparameter wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = CLADDING) für die Wandbekleidung dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialdicke des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.CeilingCovering.Name[2ufwgZd1924w$mdy9iGRc4]" xml:space="preserve">
    <value>Deckenbekleidung</value>
  </data>
  <data name="Property.CeilingCovering.Definition[2ufwgZd1924w$mdy9iGRc4]" xml:space="preserve">
    <value>Angabe des Materials für die Deckenbekleidung oder den Deckenbelag (bzw. der Unterdecke). Diese Angabe wird im Raumbuch verwendet und oft im Raumstempel angezeigt.Die Materialangabe wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = CEILING) für die Deckenbekleidung dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialangabe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.CeilingCoveringThickness.Name[2SFVcKInf3FerqiME7HE$a]" xml:space="preserve">
    <value>Dicke der Deckenbekleidung</value>
  </data>
  <data name="Property.CeilingCoveringThickness.Definition[2SFVcKInf3FerqiME7HE$a]" xml:space="preserve">
    <value>Angabe der  Dicke der Materialschichten für die Deckenbekleidung. Der Dickenparameter wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = CEILING) für die Deckenbekleidung dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialdicke des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.SkirtingBoard.Name[2vmLkEh7X3ovJBQ1iW6TC$]" xml:space="preserve">
    <value>Sockelleiste</value>
  </data>
  <data name="Property.SkirtingBoard.Definition[2vmLkEh7X3ovJBQ1iW6TC$]" xml:space="preserve">
    <value>Angabe des Materials für die Sockelleiste. Diese Angabe wird im Raumbuch verwendet.Die Materialangabe wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = SKIRTINGBOARD) für die Sockelleiste dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialangabe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.SkirtingBoardHeight.Name[1mZAbxZ$n7ahLlHsGSjn9E]" xml:space="preserve">
    <value>Höhe der Sockelleite</value>
  </data>
  <data name="Property.SkirtingBoardHeight.Definition[1mZAbxZ$n7ahLlHsGSjn9E]" xml:space="preserve">
    <value>Angabe der  Höhe der umlaufenden Sockelleiste. Der Höhenparameter wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = SKIRTINGBOARD) für die Sockelleiste dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Höhe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.Molding.Name[0YliTNi1nCAREbxZGw9ez_]" xml:space="preserve">
    <value>Gesims</value>
  </data>
  <data name="Property.Molding.Definition[0YliTNi1nCAREbxZGw9ez_]" xml:space="preserve">
    <value>Angabe des Materials für das Gesims (Deckenkante). Diese Angabe wird im Raumbuch verwendet.Die Materialangabe wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = MOLDING) für das Gesims dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Materialangabe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.MoldingHeight.Name[0Lzcn8NAn7c9qjw9yP26Jo]" xml:space="preserve">
    <value>Höhe des Gesims</value>
  </data>
  <data name="Property.MoldingHeight.Definition[0Lzcn8NAn7c9qjw9yP26Jo]" xml:space="preserve">
    <value>Angabe der  Höhe des umlaufenden Gesims (Deckenkante). Der Höhenparameter wird übernommen, wenn kein eigenes Bekleidungsobjekt (IfcCovering mit PredefinedType = MOLDING) für das Gesims dem Raum zugeordnet ist. Bei Inkonsistenzen (wenn beides gegeben ist), hat die Höhe des zugeordneten Bekleidungsobjekts Priorität.</value>
  </data>
  <data name="Property.ConcealedFlooring.Name[]" xml:space="preserve">
    <value>Installationsboden</value>
  </data>
  <data name="Property.ConcealedFlooring.Definition[]" xml:space="preserve">
    <value>Angabe, ob dieser Raum mit einem aufgeständerten Fußboden ausgestattet ist (JA), oder nicht (NEIN).</value>
  </data>
  <data name="Property.ConcealedFlooringOffset.Name[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.ConcealedFlooringOffset.Definition[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.ConcealedCeiling.Name[1eJ0_mMyP41giI5xH6IDXq]" xml:space="preserve">
    <value>Installationsdecke</value>
  </data>
  <data name="Property.ConcealedCeiling.Definition[1eJ0_mMyP41giI5xH6IDXq]" xml:space="preserve">
    <value>Angabe, ob dieser Raum mit einer Installationsdecke (abgehängten Decke) ausgestattet ist (JA), oder nicht (NEIN).</value>
  </data>
  <data name="Property.ConcealedCeilingOffset.Name[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.ConcealedCeilingOffset.Definition[]" xml:space="preserve">
    <value />
  </data>
</root>