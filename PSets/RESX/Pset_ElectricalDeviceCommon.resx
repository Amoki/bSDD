<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0UfmK0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ElectricalDeviceCommon</value>
  </data>
  <data name="PSet.Definition[0UfmK0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>A collection of properties that are commonly used by electrical device types.</value>
  </data>
  <data name="Property.RatedCurrent.Name[0uA_NPqNL1PAbblov4t9fq]" xml:space="preserve">
    <value>RatedCurrent</value>
  </data>
  <data name="Property.RatedCurrent.Definition[0uA_NPqNL1PAbblov4t9fq]" xml:space="preserve">
    <value>The current that a device is designed to handle.</value>
  </data>
  <data name="Property.RatedVoltage.Name[3wdT6rlrf9tRP6nggIlRDW]" xml:space="preserve">
    <value>RatedVoltage</value>
  </data>
  <data name="Property.RatedVoltage.Definition[3wdT6rlrf9tRP6nggIlRDW]" xml:space="preserve">
    <value>The voltage that a device is designed to handle.</value>
  </data>
  <data name="Property.NominalFrequencyRange.Name[0UfemTNJT8khovIpWn29kM]" xml:space="preserve">
    <value>NominalFrequencyRange</value>
  </data>
  <data name="Property.NominalFrequencyRange.Definition[0UfemTNJT8khovIpWn29kM]" xml:space="preserve">
    <value>The upper and lower limits of frequency for which the operation of the device is certified.</value>
  </data>
  <data name="Property.PowerFactor.Name[2xwFl7f056tQswqTwBeB06]" xml:space="preserve">
    <value>PowerFactor</value>
  </data>
  <data name="Property.PowerFactor.Definition[2xwFl7f056tQswqTwBeB06]" xml:space="preserve">
    <value>The ratio between the rated electrical power and the product of the rated current and rated voltage</value>
  </data>
  <data name="Property.ConductorFunction.Name[2TbI_F2rDDGeJFL3V29IrE]" xml:space="preserve">
    <value>ConductorFunction</value>
  </data>
  <data name="Property.ConductorFunction.Definition[2TbI_F2rDDGeJFL3V29IrE]" xml:space="preserve">
    <value>Function of a line conductor to which a device  is intended to be connected where L1, L2 and L3 represent the phase lines according to IEC 60446 notation (sometimes phase lines may be referenced by color [Red, Blue, Yellow] or by number [1, 2, 3] etc). Protective Earth is sometimes also known as CPC or common protective conductor. Note that for an electrical device, a set of line conductor functions may be applied.</value>
  </data>
  <data name="Property.NumberOfPoles.Name[1BMno0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>NumberOfPoles</value>
  </data>
  <data name="Property.NumberOfPoles.Definition[1BMno0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>The number of live lines that is intemnded to be handled by the device.</value>
  </data>
  <data name="Property.HasProtectiveEarth.Name[1Gk6S0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>HasProtectiveEarth</value>
  </data>
  <data name="Property.HasProtectiveEarth.Definition[1Gk6S0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>Indicates whether the electrical device has a protective earth connection (=TRUE) or not (= FALSE).</value>
  </data>
  <data name="Property.IP_Code.Name[1MhaW0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>IP_Code</value>
  </data>
  <data name="Property.IP_Code.Definition[1MhaW0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>IEC 60529 (1989) Classification of degrees of protection provided by enclosures (IP Code).</value>
  </data>
  <data name="Property.InsulationStandardClass.Name[1TFB_0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>InsulationStandardClass</value>
  </data>
  <data name="Property.InsulationStandardClass.Definition[1TFB_0qTyHuO00025QrE$V]" xml:space="preserve">
    <value>Insulation standard classes provides basic protection information against electric shock. Defines levels of insulation required in terms of constructional requirements (creepage and clearance distances) and electrical requirements (compliance with electric strength tests). Basic insulation is considered to be shorted under single fault conditions. The actual values required depend on the working voltage to which the insulation is subjected, as well as other factors. Also indicates whether the electrical device has a protective earth connection.</value>
  </data>
</root>