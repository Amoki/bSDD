<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2rqOG0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Pset_SanitaryTerminalTypeSanitaryFountain</value>
  </data>
  <data name="PSet.Definition[2rqOG0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Asanitary terminal that provides a low pressure jet of water for a specific purpose (IAI). HISTORY: In IFC4, Material property removed. Use materials capabilities from IfcMaterialsResource schema. Datatype of color changed to IfcLabel (still a string value).</value>
  </data>
  <data name="Property.FountainType.Name[2xBiw0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>FountainType</value>
  </data>
  <data name="Property.FountainType.Definition[2xBiw0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Selection of the type of fountain from the enumerated list of types where:-DrinkingWater: 	Sanitary appliance that provides a low pressure jet of drinking water.Eyewash: 	Waste water appliance, usually installed in work places where there is a risk of injury to eyes by solid particles or dangerous liquids, with which the user can wash the eyes without touching them.</value>
  </data>
  <data name="Property.Mounting.Name[37ioS0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Mounting</value>
  </data>
  <data name="Property.Mounting.Definition[37ioS0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Selection of the form of mounting of the fountain from the enumerated list of mountings where:-BackToWall: 	A pedestal mounted sanitary terminal that fits flush to the wall at the rear to cover its service connections.Pedestal: 	A floor mounted sanitary terminal that has an integral base.CounterTop: 	A sanitary terminal that is installed into a horizontal surface that is installed into a horizontal surface. Note: When applied to a wash hand basin, the term more normally used is ‘vanity’. See also Wash Hand Basin Type specification.WallHung: 	A sanitary terminal cantilevered clear of the floor.</value>
  </data>
  <data name="Property.NominalLength.Name[3NCd00qW8HuO00025QrE$V]" xml:space="preserve">
    <value>NominalLength</value>
  </data>
  <data name="Property.NominalLength.Definition[3NCd00qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Nominal or quoted length of the object.</value>
  </data>
  <data name="Property.NominalWidth.Name[3VYgi0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>NominalWidth</value>
  </data>
  <data name="Property.NominalWidth.Definition[3VYgi0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Nominal or quoted width of the object.</value>
  </data>
  <data name="Property.NominalDepth.Name[3eUto0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>NominalDepth</value>
  </data>
  <data name="Property.NominalDepth.Definition[3eUto0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Nominal or quoted depth of the object.</value>
  </data>
  <data name="Property.Color.Name[3mqxU0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Property.Color.Definition[3mqxU0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>Color selection for this object.</value>
  </data>
  <data name="Property.DrainSize.Name[3uarm0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>DrainSize</value>
  </data>
  <data name="Property.DrainSize.Definition[3uarm0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>The size of the drain outlet connection from the object.</value>
  </data>
</root>