<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3lbf20qUeHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_LampTypeCommon</value>
  </data>
  <data name="PSet.Definition[3lbf20qUeHuO00025QrE$V]" xml:space="preserve">
    <value>A lamp is a component within a light fixture that is designed to emit light. History: Name changed from Pset_LampEmitterTypeCommon in IFC 2x3.</value>
  </data>
  <data name="Property.Reference.Name[3rZ760qUeHuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[3rZ760qUeHuO00025QrE$V]" xml:space="preserve">
    <value>Reference ID for this specified type in this project (e.g. type 'A-1'), provided, if there is no classification reference to a recognized classification system used.</value>
  </data>
  <data name="Property.Status.Name[3zvAo0qUeHuO00025QrE$V]" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Property.Status.Definition[3zvAo0qUeHuO00025QrE$V]" xml:space="preserve">
    <value>Status of the element, predominately used in renovation or retrofitting projects. The status can be assigned to as "New" - element designed as new addition, "Existing" - element exists and remains, "Demolish" - element existed but is to be demolished,  "Temporary" - element will exists only temporary (like a temporary support structure).</value>
  </data>
  <data name="Property.ContributedLuminousFlux.Name[0Fna_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>ContributedLuminousFlux</value>
  </data>
  <data name="Property.ContributedLuminousFlux.Definition[0Fna_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>Luminous flux is a photometric measure of radiant flux, i.e. the volume of light emitted from a light source. Luminous flux is measured either for the interior as a whole or for a part of the interior (partial luminous flux for a solid angle). All other photometric parameters are derivatives of luminous flux. Luminous flux is measured in lumens (lm). The luminous flux is given as a nominal value for each lamp.</value>
  </data>
  <data name="Property.LightEmitterNominalPower.Name[0Ll320qUiHuO00025QrE$V]" xml:space="preserve">
    <value>LightEmitterNominalPower</value>
  </data>
  <data name="Property.LightEmitterNominalPower.Definition[0Ll320qUiHuO00025QrE$V]" xml:space="preserve">
    <value>Light emitter nominal power.</value>
  </data>
  <data name="Property.LampMaintenanceFactor.Name[0SIgW0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>LampMaintenanceFactor</value>
  </data>
  <data name="Property.LampMaintenanceFactor.Definition[0SIgW0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>Non recoverable losses of luminous flux of a lamp due to lamp depreciation; i.e. the decreasing of light output of a luminaire due to aging and dirt.</value>
  </data>
  <data name="Property.LampBallastType.Name[0YsH_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>LampBallastType</value>
  </data>
  <data name="Property.LampBallastType.Definition[0YsH_0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>The type of ballast used to stabilise gas discharge by limiting the current during operation and to deliver the necessary striking voltage for starting. Ballasts are needed to operate Discharge Lamps such as Fluorescent, Compact Fluorescent, High-pressure Mercury, Metal Halide and High-pressure Sodium Lamps. Magnetic ballasts are chokes which limit the current passing through a lamp connected in series on the principle of self-induction. The resultant current and power are decisive for the efficient operation of the lamp. A specially designed ballast is required for every type of lamp to comply with lamp rating in terms of Luminous Flux, Color Appearance and service life. The two types of magnetic ballasts for fluorescent lamps are KVG Conventional   (EC-A series) and VVG Low-loss ballasts (EC-B series). Low-loss ballasts have a higher efficiency, which means reduced ballast losses and a lower thermal load. Electronic ballasts are used to run fluorescent lamps at high frequencies (approx. 35 - 40 kHz).</value>
  </data>
  <data name="Property.LampCompensationType.Name[0oyFy0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>LampCompensationType</value>
  </data>
  <data name="Property.LampCompensationType.Definition[0oyFy0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>Identifies the form of compensation used for power factor correction and radio suppression.</value>
  </data>
  <data name="Property.ColorAppearance.Name[11rx60qUiHuO00025QrE$V]" xml:space="preserve">
    <value>ColorAppearance</value>
  </data>
  <data name="Property.ColorAppearance.Definition[11rx60qUiHuO00025QrE$V]" xml:space="preserve">
    <value>In both the DIN and CIE standards, artificial light sources are classified in terms of their color appearance. To the human eye they all appear to be white; the difference can only be detected by direct comparison. Visual performance is not directly affected by differences in color appearance.</value>
  </data>
  <data name="Property.Spectrum.Name[1BOHc0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>Spectrum</value>
  </data>
  <data name="Property.Spectrum.Definition[1BOHc0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>The spectrum of radiation describes its composition with regard to wavelength. Light, for example, as the portion of electromagnetic radiation that is visible to the human eye, is radiation with wavelengths in the range of approx. 380 to 780 nm (1 nm = 10 m). The corresponding range of colours varies from violet to indigo, blue, green, yellow, orange, and red. These colours form a continuous spectrum, in which the various spectral sectors merge into each other.</value>
  </data>
  <data name="Property.ColorTemperature.Name[1PhpM0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>ColorTemperature</value>
  </data>
  <data name="Property.ColorTemperature.Definition[1PhpM0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>The color temperature of any source of radiation is defined as the temperature (in Kelvin) of a black-body or Planckian radiator whose radiation has the same chromaticity as the source of radiation. Often the values are only approximate color temperatures as the black-body radiator cannot emit radiation of every chromaticity value. The color temperatures of the commonest artificial light sources range from less than 3000K (warm white) to 4000K (intermediate) and over 5000K (daylight).</value>
  </data>
  <data name="Property.ColorRenderingIndex.Name[1VfHQ0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>ColorRenderingIndex</value>
  </data>
  <data name="Property.ColorRenderingIndex.Definition[1VfHQ0qUiHuO00025QrE$V]" xml:space="preserve">
    <value>The CRI indicates how well a light source renders eight standard colors compared to perfect reference lamp with the same color temperature. The CRI scale ranges from 1 to 100, with 100 representing perfect rendering properties.</value>
  </data>
</root>