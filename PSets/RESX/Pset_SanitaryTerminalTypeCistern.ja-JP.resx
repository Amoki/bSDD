<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[1amP00qW8HuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[1amP00qW8HuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.CisternHeight.Name[1g7jg0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>貯水タンクの高さ</value>
  </data>
  <data name="Property.CisternHeight.Definition[1g7jg0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>貯水タンクの高さを示す。小便器がフラッシュバルブを使い貯水タンクを持っていない場合は'None'に設定される。</value>
  </data>
  <data name="Property.CisternCapacity.Name[1uRFQ0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>貯水タンク容量</value>
  </data>
  <data name="Property.CisternCapacity.Definition[1uRFQ0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>貯水タンクの体積容量。</value>
  </data>
  <data name="Property.IsSingleFlush.Name[1zoa40qW8HuO00025QrE$V]" xml:space="preserve">
    <value>単一のフラッシュ</value>
  </data>
  <data name="Property.IsSingleFlush.Definition[1zoa40qW8HuO00025QrE$V]" xml:space="preserve">
    <value>単一フラッシュ= TRUE（各洗浄に同量の水が使用される）、デュアルフラッシュ= FALSE（洗浄する汚物に応じてハイまたはローをユーザが選択することができるフラッシュ使用）の指標を設定する。</value>
  </data>
  <data name="Property.FlushType.Name[24yKy0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>タイプフラッシュ</value>
  </data>
  <data name="Property.FlushType.Definition[24yKy0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>列挙するプロパティはPset_FlushTypeEnumでは貯水槽や衛生配管の配置による、フラッシュメカニズムのタイプを定義する：レバー式：洗浄水は、レバーをねじることによって貯水タンクから衛生配管にの所定の流量を流す。引っ張り式：洗浄水は、ハンドルまたはノブを垂直方向に引くことによって貯水タンクから衛生配管にの所定の流量を流す。押しボタン式：洗浄水は、ボタンかプレートを押すことによって貯水タンクから衛生配管にの所定の流量を流す。センサー式：洗浄水は、自動検出機構を介して作動する。</value>
  </data>
  <data name="Property.FlushRate.Name[2LeSK0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>フラッシュレート</value>
  </data>
  <data name="Property.FlushRate.Definition[2LeSK0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>各フラッシュで使用される水量の最小値と最大値。単一フラッシュが使用されている場合、上下限値は同じ。デュアルフラッシュトイレについては、下限が低いフラッシュレート、上限に大きいフラッシュ率を使用する。ここで、洗浄はフラッシュバルブを通した水の水圧を用いて達成されるので、フラッシュレートとフラッシュバルブの上下限値と等しくなければなりません（関連バルブプロパティセットを参照してください）。また、この場合には、フラッシュレートのプロパティを設定しない。フラッシュバルブのフラッシュレートを参照。</value>
  </data>
  <data name="Property.IsAutomaticFlush.Name[2SoDC0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>自動フラッシュか</value>
  </data>
  <data name="Property.IsAutomaticFlush.Definition[2SoDC0qW8HuO00025QrE$V]" xml:space="preserve">
    <value>貯水タンクは、使用後に自動的または定期的に洗浄する場合（TRUE）、手動で洗浄する場合（FALSE）をブーリアン値で指定する。</value>
  </data>
</root>