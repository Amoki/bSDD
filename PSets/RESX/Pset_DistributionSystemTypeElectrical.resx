<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[1wkrg0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_DistributionSystemTypeElectrical</value>
  </data>
  <data name="PSet.Definition[1wkrg0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>Properties of electrical circuits.</value>
  </data>
  <data name="Property.ElectricalSystemType.Name[206AK0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>ElectricalSystemType</value>
  </data>
  <data name="Property.ElectricalSystemType.Definition[206AK0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>For certain purposes of electrical regulations, IEC 60364 defines types of system using type identifiers. Assignment of identifiers depends upon the relationship of the source, and of exposed conductive parts of the installation, to Ground (Earth).   Identifiers that may be assigned through IEC 60364 are: •TN type system, a system having one or more points of the source of energy directly earthed, the exposed conductive parts of the installation being connected to that point by protective conductors, •TN C type system, a TN type system in which neutral and protective functions are combined in a single conductor throughout the system, •TN S type system, a TN type system having separate neutral and protective conductors throughout the system, •TN C S type system, a TN type system in which neutral and protective functions are combined in a single conductor in part of the system, •TT type system, a system having one point of the source of energy directly earthed, the exposed conductive parts of the installation being connected to earth electrodes electrically independent of the earth electrodes of the source, •IT type system, a system having no direct connection between live parts and Earth, the exposed conductive parts of the electrical installation being earthed.</value>
  </data>
  <data name="Property.ElectricalSystemCategory.Name[2GoHi0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>ElectricalSystemCategory</value>
  </data>
  <data name="Property.ElectricalSystemCategory.Definition[2GoHi0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>Designates the voltage range of the circuit, according to IEC.  HIGHVOLTAGE indicates &gt;1000V AC or &gt;1500V DV; LOWVOLTAGE indicates 50-1000V AC or 120-1500V DC; EXTRALOWVOLTAGE indicates &lt;50V AC or &lt;120V DC.</value>
  </data>
  <data name="Property.Diversity.Name[2V5pS0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>Diversity</value>
  </data>
  <data name="Property.Diversity.Definition[2V5pS0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>The ratio, expressed as a numericalvalue or as a percentage, of thesimultaneous maximum demand ofa group of electrical appliances orconsumers within a specified period,to the sum of their individual maximumdemands within the sameperiod. The group of electrical appliances is in this case connected to this circuit. Defenition from IEC 60050, IEV 691-10-04 NOTE1: It is often not desirable to size each conductor in a distribution system to support the total connected load at that point in the network. Diversity is applied on the basis of the anticipated loadings that are likely to result from all loads not being connected at the same time.NOTE2: Diversity is applied to final circuits only, not to sub-main circuits supplying other DBs.</value>
  </data>
  <data name="Property.NumberOfLiveConductors.Name[1kC$kDKsr14hhEEn_eyHK8]" xml:space="preserve">
    <value>NumberOfLiveConductors</value>
  </data>
  <data name="Property.NumberOfLiveConductors.Definition[1kC$kDKsr14hhEEn_eyHK8]" xml:space="preserve">
    <value>Number of live conductors within this circuit. Either this property or the ConductorFunction property (if only one) may be asserted.</value>
  </data>
  <data name="Property.MaximumAllowedVoltageDrop.Name[2fEJM0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>MaximumAllowedVoltageDrop</value>
  </data>
  <data name="Property.MaximumAllowedVoltageDrop.Definition[2fEJM0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>The maximum voltage drop across the circuit that must not be exceeded. There are two  voltage drop limit settings that may be applied; one for sub-main circuits, and one in each Distribution Board or Consumer Unit for final circuits connected to that board. The settings should limit the overall voltage drop to the required level. Default settings of 1.5% for sub-main circuits and 2.5% for final circuits, giving an overall limit of 4% may be applied.NOTE: This value may also be specified as a constraint within an IFC model if required but is included within the property set at this stage pending implementation of the required capabilities within software applications.</value>
  </data>
  <data name="Property.NetImpedance.Name[2j$Uc0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>NetImpedance</value>
  </data>
  <data name="Property.NetImpedance.Definition[2j$Uc0qTeHuO00025QrE$V]" xml:space="preserve">
    <value>The maximum earth loop impedance upstream of a circuit (typically stated as the variable Zs). This value is for 55o C (130oF) Celsius usage.</value>
  </data>
</root>