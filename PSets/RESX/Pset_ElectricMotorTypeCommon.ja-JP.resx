<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[3AdI00qU0HuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[3AdI00qU0HuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[3INCI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>参照</value>
  </data>
  <data name="Property.Reference.Definition[3INCI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>当該プロジェクトで定義する形式の参照ID（例：A-1)、承認された分類に存在しないときに使用される。</value>
  </data>
  <data name="Property.Status.Name[3N8NY0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>状態</value>
  </data>
  <data name="Property.Status.Definition[3N8NY0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>要素（主にリノベーションまたは改修プロジェクトにおいて）の状態。 状態は、「新規(New)」－新しく追加される要素。「既存」－要素は存在し、かつ残りもの。「破壊」－要素は存在したが、廃棄されるもの。「一時的」－一時的に存在する要素（一時的にサポートしている構造のようなもの）。</value>
  </data>
  <data name="Property.MaximumPowerOutput.Name[3bRvI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>最大出力</value>
  </data>
  <data name="Property.MaximumPowerOutput.Definition[3bRvI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>エンジンの最大出力定格。</value>
  </data>
  <data name="Property.ElectricMotorEfficiency.Name[3fcx80qU0HuO00025QrE$V]" xml:space="preserve">
    <value>出力効率</value>
  </data>
  <data name="Property.ElectricMotorEfficiency.Definition[3fcx80qU0HuO00025QrE$V]" xml:space="preserve">
    <value>出力容量と入力容量の比率。</value>
  </data>
  <data name="Property.StartCurrentFactor.Name[3k_Fo0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>始動電流係数</value>
  </data>
  <data name="Property.StartCurrentFactor.Definition[3k_Fo0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>始動電流係数はエンジンが動き始めた時のピーク始動電流を定義。始動電流係数は定格電流と始動時の電流を掛け合わせたもの。</value>
  </data>
  <data name="Property.StartingTime.Name[3p9He0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>始動時間</value>
  </data>
  <data name="Property.StartingTime.Definition[3p9He0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>モーターが停止状態から定格電圧を印加し定格速度に到達するまでに必要な時間。</value>
  </data>
  <data name="Property.TeTime.Name[3uWcI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>最大時間</value>
  </data>
  <data name="Property.TeTime.Definition[3uWcI0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>モーターがEX環境でローターロックされて使用きる最大時間。モーター始動電流が機器を介して減速している時間より前に保護装置で停止する時間を示す。</value>
  </data>
  <data name="Property.LockedRotorCurrent.Name[3ztwy0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>拘束ロータ電流</value>
  </data>
  <data name="Property.LockedRotorCurrent.Definition[3ztwy0qU0HuO00025QrE$V]" xml:space="preserve">
    <value>モーターの電機子に電圧を印加しロータが回っていない時の入力電流。</value>
  </data>
  <data name="Property.MotorEnclosureType.Name[02f6C0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>モーター保護構造</value>
  </data>
  <data name="Property.MotorEnclosureType.Definition[02f6C0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>モーターに必要な筐体を使用可能なタイプのリストから選択。</value>
  </data>
  <data name="Property.FrameSize.Name[0FmL80qU4HuO00025QrE$V]" xml:space="preserve">
    <value>フレームサイズ</value>
  </data>
  <data name="Property.FrameSize.Definition[0FmL80qU4HuO00025QrE$V]" xml:space="preserve">
    <value>フレームサイズの意味が実際の大きさを表示しているのか、規格表記なのかを指定。</value>
  </data>
  <data name="Property.IsGuarded.Name[0LjpC0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>保護</value>
  </data>
  <data name="Property.IsGuarded.Definition[0LjpC0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>モーターの筐体が守られているかどうかを示す。</value>
  </data>
  <data name="Property.HasPartWinding.Name[0R57s0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>巻線　</value>
  </data>
  <data name="Property.HasPartWinding.Definition[0R57s0qU4HuO00025QrE$V]" xml:space="preserve">
    <value>モータが単一の速度であるかどうかを示す。例えば、単巻線、マルチスピード、分割巻線。</value>
  </data>
</root>