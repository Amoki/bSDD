<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2hEX8rHcf2IhhVoApZBdbu]" xml:space="preserve">
    <value>Pset_CableSegmentOccurrence</value>
  </data>
  <data name="PSet.Definition[2hEX8rHcf2IhhVoApZBdbu]" xml:space="preserve">
    <value>Properties for the occurrence of an electrical cable, core or conductor that conforms to a type as specified by an appropriate type definition within IFC. NOTE: Maximum allowed voltage drop should be derived from the property within Pset_ElectricalCircuit.</value>
  </data>
  <data name="Property.DesignAmbientTemperature.Name[]" xml:space="preserve">
    <value>DesignAmbientTemperature</value>
  </data>
  <data name="Property.DesignAmbientTemperature.Definition[]" xml:space="preserve">
    <value>The highest and lowest local ambient temperature likely to be encountered.</value>
  </data>
  <data name="Property.UserCorrectionFactor.Name[]" xml:space="preserve">
    <value>UserCorrectionFactor</value>
  </data>
  <data name="Property.UserCorrectionFactor.Definition[]" xml:space="preserve">
    <value>An arbitrary correction factor that may be applied by the user.</value>
  </data>
  <data name="Property.NumberOfParallelCircuits.Name[2WcMHnMLX2Hxyrm8c62H0y]" xml:space="preserve">
    <value>NumberOfParallelCircuits</value>
  </data>
  <data name="Property.NumberOfParallelCircuits.Definition[2WcMHnMLX2Hxyrm8c62H0y]" xml:space="preserve">
    <value>Number of parallel circuits.</value>
  </data>
  <data name="Property.InstallationMethod.Name[0ZNlqLzaDEWBf79TWJ7$2R]" xml:space="preserve">
    <value>InstallationMethod</value>
  </data>
  <data name="Property.InstallationMethod.Definition[0ZNlqLzaDEWBf79TWJ7$2R]" xml:space="preserve">
    <value>Method of installation of cable/conductor. Installation methods are typically defined by reference in standards such as IEC 60364-5-52, table 52A-1 or BS7871 Appendix 4 Table 4A1 etc. Selection of the value to be used should be determined from such a standard according to local usage.</value>
  </data>
  <data name="Property.InstallationMethodFlagEnum.Name[0kyYqP9Mf3JeNfkjRlQ$KI]" xml:space="preserve">
    <value>InstallationMethodFlagEnum</value>
  </data>
  <data name="Property.InstallationMethodFlagEnum.Definition[0kyYqP9Mf3JeNfkjRlQ$KI]" xml:space="preserve">
    <value>Special installation conditions relating to particular types of installation based on IEC60364-5-52:2001 reference installation methods C and D.</value>
  </data>
  <data name="Property.DistanceBetweenParallelCircuits.Name[2gAG0NUaPEkALZKlTIcH4j]" xml:space="preserve">
    <value>DistanceBetweenParallelCircuits</value>
  </data>
  <data name="Property.DistanceBetweenParallelCircuits.Definition[2gAG0NUaPEkALZKlTIcH4j]" xml:space="preserve">
    <value>Distance measured between parallel circuits.</value>
  </data>
  <data name="Property.SoilConductivity.Name[2l9v_rFQn4KBRk2k9_6Enp]" xml:space="preserve">
    <value>SoilConductivity</value>
  </data>
  <data name="Property.SoilConductivity.Definition[2l9v_rFQn4KBRk2k9_6Enp]" xml:space="preserve">
    <value>Thermal conductivity of soil. Generally, within standards such as IEC 60364-5-52, table 52A-16, the resistivity of soil is required (measured in [SI] units of degK.m /W). This is the reciprocal of the conductivity value and needs to be calculated accordingly.</value>
  </data>
  <data name="Property.CarrierStackNumber.Name[3lEXoRL3v6ywwoKaUQcT$J]" xml:space="preserve">
    <value>CarrierStackNumber</value>
  </data>
  <data name="Property.CarrierStackNumber.Definition[3lEXoRL3v6ywwoKaUQcT$J]" xml:space="preserve">
    <value>Number of carrier segments (tray, ladder etc.) that are vertically stacked (vertical is measured as the z-axis of the local coordinate system of the carrier segment).</value>
  </data>
  <data name="Property.MountingMethod.Name[1jnNITWuL1zf6AS6UciAZ4]" xml:space="preserve">
    <value>MountingMethod</value>
  </data>
  <data name="Property.MountingMethod.Definition[1jnNITWuL1zf6AS6UciAZ4]" xml:space="preserve">
    <value>The method of mounting cable segment occurrences on a cable carrier occurrence from which the method required can be selected. This is for the purpose of carrying out 'worst case' cable sizing calculations and may be a conceptual requirement rather than a statement of the physical occurrences of cable and carrier segments.</value>
  </data>
  <data name="Property.IsHorizontalCable.Name[2OIAGCT2T1tQdYZrkVgwW7]" xml:space="preserve">
    <value>IsHorizontalCable</value>
  </data>
  <data name="Property.IsHorizontalCable.Definition[2OIAGCT2T1tQdYZrkVgwW7]" xml:space="preserve">
    <value>Indication of whether the cable occurrences are mounted horizontally (= TRUE) or vertically (= FALSE).</value>
  </data>
  <data name="Property.IsMountedFlatCable.Name[2sgLCyOubCsABWMX4yRq$w]" xml:space="preserve">
    <value>IsMountedFlatCable</value>
  </data>
  <data name="Property.IsMountedFlatCable.Definition[2sgLCyOubCsABWMX4yRq$w]" xml:space="preserve">
    <value>Indication of whether the cable occurrences are mounted flat (= TRUE) or in a trefoil pattern (= FALSE).</value>
  </data>
  <data name="Property.CurrentCarryingCapasity.Name[0010zzDu1DGQmc3gwA5Tve]" xml:space="preserve">
    <value>CurrentCarryingCapasity</value>
  </data>
  <data name="Property.CurrentCarryingCapasity.Definition[0010zzDu1DGQmc3gwA5Tve]" xml:space="preserve">
    <value>Maximum value of electric current which can be carried continuously by a conductor, a device or an apparatus, under specified conditions without its steady-state temperature exceeding a  specified value. Based on IEC60826-11-13. NOTE: The temperature specified value is maximum Design Ambient Temperature.</value>
  </data>
  <data name="Property.MaximumCableLength.Name[2LexilE1r1oOVxWd$BQuc0]" xml:space="preserve">
    <value>MaximumCableLength</value>
  </data>
  <data name="Property.MaximumCableLength.Definition[2LexilE1r1oOVxWd$BQuc0]" xml:space="preserve">
    <value>Maximum cable length based on voltagedrop. NOTE: This value may also be specified as a constraint within an IFC model if required but is included within the property set at this stage pending implementation of the required capabilities within software applications.</value>
  </data>
  <data name="Property.PowerLoss.Name[2JrGMduPz65x6spSDSPKbq]" xml:space="preserve">
    <value>PowerLoss</value>
  </data>
  <data name="Property.PowerLoss.Definition[2JrGMduPz65x6spSDSPKbq]" xml:space="preserve">
    <value>Total loss of power across this cable.</value>
  </data>
</root>