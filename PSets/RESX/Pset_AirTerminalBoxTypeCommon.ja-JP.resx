<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[1kmP_0qRuHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[1kmP_0qRuHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[1sWKG0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>参照記号</value>
  </data>
  <data name="Property.Reference.Definition[1sWKG0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>このプロジェクトにおける参照記号(例：A-1)。分類コードではなく内部で使用されるプロジェクトタイプとして使用されるもの。</value>
  </data>
  <data name="Property.Status.Name[1z3xk0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>状態</value>
  </data>
  <data name="Property.Status.Definition[1z3xk0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>要素（主にリノベーションまたは改修プロジェクトにおいて）の状態。 状態は、「新規(New)」－新しく追加される要素。「既存」－要素は存在し、かつ残りもの。「破壊」－要素は存在したが、廃棄されるもの。「一時的」－一時的に存在する要素（一時的にサポートしている構造のようなもの）。</value>
  </data>
  <data name="Property.AirflowRateRange.Name[2CZmI0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>風量範囲</value>
  </data>
  <data name="Property.AirflowRateRange.Definition[2CZmI0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>送風できる風量の範囲</value>
  </data>
  <data name="Property.AirPressureRange.Name[2P4rq0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>空気圧範囲</value>
  </data>
  <data name="Property.AirPressureRange.Definition[2P4rq0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナル入り口での許容静圧範囲</value>
  </data>
  <data name="Property.NominalAirFlowRate.Name[2XQvW0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>設計風量範囲</value>
  </data>
  <data name="Property.NominalAirFlowRate.Definition[2XQvW0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>設計風量範囲</value>
  </data>
  <data name="Property.ArrangementType.Name[2dONa0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナル形式</value>
  </data>
  <data name="Property.ArrangementType.Definition[2dONa0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナルボックスの形式。単一ダクト：単一のダクトから、温風または冷風を受け取るデュアルダクト：温風、冷風を分離されたダクトから受け取る</value>
  </data>
  <data name="Property.ReheatType.Name[2rhvK0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>再熱形式</value>
  </data>
  <data name="Property.ReheatType.Definition[2rhvK0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナルの再熱方式（電気、水コイル、蒸気コイル、ガス加熱．．．）</value>
  </data>
  <data name="Property.HasSoundAttenuator.Name[38ASw0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>消音有無</value>
  </data>
  <data name="Property.HasSoundAttenuator.Definition[38ASw0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナルに消音があるか否か　（あればTRUE)</value>
  </data>
  <data name="Property.HasReturnAir.Name[3DXna0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>還気有無</value>
  </data>
  <data name="Property.HasReturnAir.Definition[3DXna0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナルで還気を混合しているか否か（していればTRUE)</value>
  </data>
  <data name="Property.HasFan.Name[3JVFe0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>送風機有無</value>
  </data>
  <data name="Property.HasFan.Definition[3JVFe0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>内部に送風機を持つ時にTRUE</value>
  </data>
  <data name="Property.NominalInletAirPressure.Name[3PSji0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>設計入口空気圧</value>
  </data>
  <data name="Property.NominalInletAirPressure.Definition[3PSji0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>入口静圧の設計値</value>
  </data>
  <data name="Property.NominalDamperDiameter.Name[3VQBm0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>設計ダンパ直径</value>
  </data>
  <data name="Property.NominalDamperDiameter.Definition[3VQBm0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ダンパ直径の設計値</value>
  </data>
  <data name="Property.HousingThickness.Name[3anWQ0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ハウジング板厚</value>
  </data>
  <data name="Property.HousingThickness.Definition[3anWQ0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>ターミナルのハウジング材の板厚</value>
  </data>
  <data name="Property.OperationTemperatureRange.Name[3gk_U0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>動作温度範囲</value>
  </data>
  <data name="Property.OperationTemperatureRange.Definition[3gk_U0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>許容周囲温度範囲</value>
  </data>
  <data name="Property.ReturnAirFractionRange.Name[3nulM0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>還気風量比</value>
  </data>
  <data name="Property.ReturnAirFractionRange.Definition[3nulM0qRuHuO00025QrE$V]" xml:space="preserve">
    <value>送風量の一部としての許容還気風量</value>
  </data>
</root>