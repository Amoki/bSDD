<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0_xxU0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Pset_TransformerTypeCommon</value>
  </data>
  <data name="PSet.Definition[0_xxU0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>An inductive stationary device that transfers electrical energy from one circuit to another.</value>
  </data>
  <data name="Property.Reference.Name[14JG80qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[14JG80qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Reference ID for this specified type in this project (e.g. type 'A-1'), provided, if there is no classification reference to a recognized classification system used.</value>
  </data>
  <data name="Property.Status.Name[1BT100qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Property.Status.Definition[1BT100qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Status of the element, predominately used in renovation or retrofitting projects. The status can be assigned to as "New" - element designed as new addition, "Existing" - element exists and remains, "Demolish" - element existed but is to be demolished,  "Temporary" - element will exists only temporary (like a temporary support structure).</value>
  </data>
  <data name="Property.PrimaryVoltage.Name[1Txac0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>PrimaryVoltage</value>
  </data>
  <data name="Property.PrimaryVoltage.Definition[1Txac0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The voltage that is going to be transformed and that runs into the transformer on the primary side.</value>
  </data>
  <data name="Property.SecondaryVoltage.Name[1ZIvG0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>SecondaryVoltage</value>
  </data>
  <data name="Property.SecondaryVoltage.Definition[1ZIvG0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The voltage that has been transformed and is running out of the transformer on the secondary side.</value>
  </data>
  <data name="Property.PrimaryCurrent.Name[1gSg80qX4HuO00025QrE$V]" xml:space="preserve">
    <value>PrimaryCurrent</value>
  </data>
  <data name="Property.PrimaryCurrent.Definition[1gSg80qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The current that is going to be transformed and that runs into the transformer on the primary side.</value>
  </data>
  <data name="Property.SecondaryCurrent.Name[1n0Hc0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>SecondaryCurrent</value>
  </data>
  <data name="Property.SecondaryCurrent.Definition[1n0Hc0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The current that has been transformed and is running out of the transformer on the secondary side.</value>
  </data>
  <data name="Property.PrimaryFrequency.Name[1tZv40qX4HuO00025QrE$V]" xml:space="preserve">
    <value>PrimaryFrequency</value>
  </data>
  <data name="Property.PrimaryFrequency.Definition[1tZv40qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The frequency that is going to be transformed and that runs into the transformer on the primary side.</value>
  </data>
  <data name="Property.SecondaryFrequency.Name[1_7WY0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>SecondaryFrequency</value>
  </data>
  <data name="Property.SecondaryFrequency.Definition[1_7WY0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The frequency that has been transformed and is running out of the transformer on the secondary side.</value>
  </data>
  <data name="Property.PrimaryApparentPower.Name[23UrC0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>PrimaryApparentPower</value>
  </data>
  <data name="Property.PrimaryApparentPower.Definition[23UrC0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The power in VA (volt ampere) that has been transformed and that runs into the transformer on the primary side.</value>
  </data>
  <data name="Property.SecondaryApparentPower.Name[29SJG0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>SecondaryApparentPower</value>
  </data>
  <data name="Property.SecondaryApparentPower.Definition[29SJG0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The power in VA (volt ampere) that has been transformed and is running out of the transformer on the secondary side.</value>
  </data>
  <data name="Property.MaximumApparentPower.Name[2FPnK0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>MaximumApparentPower</value>
  </data>
  <data name="Property.MaximumApparentPower.Definition[2FPnK0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>Maximum apparent power/capacity in VA (volt ampere).</value>
  </data>
  <data name="Property.SecondaryCurrentType.Name[2Kn5_0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>SecondaryCurrentType</value>
  </data>
  <data name="Property.SecondaryCurrentType.Definition[2Kn5_0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>A list of the secondary current types that can result from transformer output.</value>
  </data>
  <data name="Property.ShortCircuitVoltage.Name[2Wi260qX4HuO00025QrE$V]" xml:space="preserve">
    <value>ShortCircuitVoltage</value>
  </data>
  <data name="Property.ShortCircuitVoltage.Definition[2Wi260qX4HuO00025QrE$V]" xml:space="preserve">
    <value>A complex number that specifies the real and imaginary parts of the short-circuit voltage at rated current of a transformer given in %.</value>
  </data>
  <data name="Property.RealImpedanceRatio.Name[2cfWA0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>RealImpedanceRatio</value>
  </data>
  <data name="Property.RealImpedanceRatio.Definition[2cfWA0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The ratio between the real part of the zero sequence impedance and the real part of the positive impedance (i.e. real part of the short-circuit voltage) of the transformer.Used for three-phase transformer which includes a N-conductor.</value>
  </data>
  <data name="Property.ImaginaryImpedanceRatio.Name[2ic_E0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>ImaginaryImpedanceRatio</value>
  </data>
  <data name="Property.ImaginaryImpedanceRatio.Definition[2ic_E0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>The ratio between the imaginary part of the zero sequence impedance and the imaginary part of the positive impedance (i.e. imaginary part of the short-circuit voltage) of the transformer.Used for three-phase transformer which includes a N-conductor.</value>
  </data>
  <data name="Property.TransformerVectorGroup.Name[20NDJ9E9n4bPj7DR5bMSk9]" xml:space="preserve">
    <value>TransformerVectorGroup</value>
  </data>
  <data name="Property.TransformerVectorGroup.Definition[20NDJ9E9n4bPj7DR5bMSk9]" xml:space="preserve">
    <value>List of the possible vector groups for the transformer from which that required may be set. Values in the enumeration list follow a standard international code where the first letter  describes how the primary windings are connected,the second letter describes how the secondary windings are connected, and the numbers describe the rotation of voltages and currents from the primary to the secondary side in multiples of 30 degrees.D: means that the windings are delta-connected.Y: means that the windings are star-connected. Z: means that the windings are zig-zag connected (a special start-connected providing low reactance of the transformer); The connectivity is only relevant for three-phase transformers.</value>
  </data>
  <data name="Property.IsNeutralPrimaryTerminalAvailable.Name[3IAEq0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>IsNeutralPrimaryTerminalAvailable</value>
  </data>
  <data name="Property.IsNeutralPrimaryTerminalAvailable.Definition[3IAEq0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>An indication of whether the neutral point of the primary winding is available as a terminal (=TRUE) or not (= FALSE).</value>
  </data>
  <data name="Property.IsNeutralSecondaryTerminalAvailable.Name[3PJ$i0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>IsNeutralSecondaryTerminalAvailable</value>
  </data>
  <data name="Property.IsNeutralSecondaryTerminalAvailable.Definition[3PJ$i0qX4HuO00025QrE$V]" xml:space="preserve">
    <value>An indication of whether the neutral point of the secondary winding is available as a terminal (=TRUE) or not (= FALSE).</value>
  </data>
</root>