<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0nE3C0qWqHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[0nE3C0qWqHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[0va6u0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[0va6u0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Référence à l'identifiant d'un type spécifié dans le contexte du projet (exemple : "type A1") pour désigner un "type de construction". Une alternative au nom d'un objet type lorsque les objets types ne sont pas gérés par le logiciel.</value>
  </data>
  <data name="Property.Status.Name[107kM0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Statut</value>
  </data>
  <data name="Property.Status.Definition[107kM0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Statut de l'élément, principalement utilisé dans les projets de rénovation et de réhabilitation. Le statut a pour valeur NOUVEAU pour un nouvel élément, EXISTANT pour un élément existant qui est conservé, DEMOLI pour un élément existant à démolir et TEMPORAIRE pour un élément temporaire (comme une structure support provisoire).</value>
  </data>
  <data name="Property.NumberOfRiser.Name[1F1PW0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>NombreContreMarches</value>
  </data>
  <data name="Property.NumberOfRiser.Definition[1F1PW0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Nombre total de contremarches de l'escalier</value>
  </data>
  <data name="Property.NumberOfTreads.Name[1K_ta0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>NombreGirons</value>
  </data>
  <data name="Property.NumberOfTreads.Definition[1K_ta0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Nombre total de girons de l'escalier</value>
  </data>
  <data name="Property.RiserHeight.Name[1QyLe0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>HauteurContreMarche</value>
  </data>
  <data name="Property.RiserHeight.Definition[1QyLe0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Hauteur de la contremarche, supposée homogène pour toutes les marches de l'escalier ou de la volée de marches.</value>
  </data>
  <data name="Property.TreadLength.Name[1ZIPK0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>LongueurGiron</value>
  </data>
  <data name="Property.TreadLength.Definition[1ZIPK0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Longueur de giron (largeur de marche), supposée égale pour toutes les marches de l'escalier ou de la volée de marchesle long de la ligne de foulée</value>
  </data>
  <data name="Property.NosingLength.Name[1iEcQ0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>LongueurNez</value>
  </data>
  <data name="Property.NosingLength.Definition[1iEcQ0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Longueur du nez de marche.</value>
  </data>
  <data name="Property.WalkingLineOffset.Name[1nbx40qWqHuO00025QrE$V]" xml:space="preserve">
    <value>PositionLigneFoulee</value>
  </data>
  <data name="Property.WalkingLineOffset.Definition[1nbx40qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Décalage de la ligne de foulée par rapport au côté intérieur de la volée. Nota : la ligne de foulée peut avoir sa propre représentation. En cas d'incohérences, c'est la valeur déduite de la représentation de la forme qui prime.</value>
  </data>
  <data name="Property.TreadLengthAtOffset.Name[1x8Ha0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>LongueurGironSurLigneFoulee</value>
  </data>
  <data name="Property.TreadLengthAtOffset.Definition[1x8Ha0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Longueur du giron le long de la ligne de foulée. La valeur relativement à cette position doit normalement être identique à la propriété "Longueur du giron" ; elle peut être indiquée si la valeur de la propriété "Décalage de la ligne de foulée" donnée par une règle de calcul est différente de celle utilisée en conception.</value>
  </data>
  <data name="Property.TreadLengthAtInnerSide.Name[244Ug0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>LongueurGironCoteInterieur</value>
  </data>
  <data name="Property.TreadLengthAtInnerSide.Definition[244Ug0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Longueur minimum des girons du côté intérieur de l'enroulement. Pertinent seulement pour les escaliers tournants car pour une volée droite, la valeur est donnée par la propriété "Longueur du giron". C'est une valeur précalculée. En cas d'incohérence, c'est la valeur dérivée de la représentation de la forme qui prime.</value>
  </data>
  <data name="Property.Headroom.Name[2BqOy0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>HauteurPassage</value>
  </data>
  <data name="Property.Headroom.Definition[2BqOy0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Hauteur de passage (échappée) actuellement projetée. Cette propriété est donnée en complément de la représentation de la forme de l'élément et des paramètres géométriques qui la déterminent. En cas d'incohérence entre ces paramètres géométriques et cette propriété, ce sont les paramètres géométriques qui priment.</value>
  </data>
  <data name="Property.WaistThickness.Name[2KASe0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Epaisseur</value>
  </data>
  <data name="Property.WaistThickness.Definition[2KASe0qWqHuO00025QrE$V]" xml:space="preserve">
    <value>Epaisseur minimum de la volée mesurée perpendiculairement à la pente de la volée jusqu'au coin intérieur formé par la marche et la contremarche. C'est une valeur précalculée. En cas d'incohérence, c'est la valeur dérivée de la représentation de la forme qui prime.</value>
  </data>
</root>