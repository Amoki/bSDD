<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[0j1Ha0qVyHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="PSet.Definition[0j1Ha0qVyHuO00025QrE$V]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.Reference.Name[0pav20qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Property.Reference.Definition[0pav20qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Référence à l'identifiant d'un type spécifié dans le contexte du projet (exemple : "type A1") pour désigner un "type de construction". Une alternative au nom d'un objet type lorsque les objets types ne sont pas gérés par le logiciel.</value>
  </data>
  <data name="Property.Status.Name[0uyDi0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Statut</value>
  </data>
  <data name="Property.Status.Definition[0uyDi0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Statut de l'élément, principalement utilisé dans les projets de rénovation et de réhabilitation. Le statut a pour valeur NOUVEAU pour un nouvel élément, EXISTANT pour un élément existant qui est conservé, DEMOLI pour un élément existant à démolir et TEMPORAIRE pour un élément temporaire (comme une structure support provisoire).</value>
  </data>
  <data name="Property.RequiredHeadroom.Name[15TJE0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>HauteurPassageRequise</value>
  </data>
  <data name="Property.RequiredHeadroom.Definition[15TJE0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Hauteur de passage (échappée) requise selon la réglementation en vigueur ou des spécifications additionnelles.</value>
  </data>
  <data name="Property.RequiredSlope.Name[1C0wi0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>InclinaisonRequise</value>
  </data>
  <data name="Property.RequiredSlope.Definition[1C0wi0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Inclinaison de la rampe par rapport à l'horizontal (0 degrés). Valeur maximale de l'inclinaison du passage selon le code applicable ou pour respecter des contraintes additionnelles.</value>
  </data>
  <data name="Property.HandicapAccessible.Name[1Wu3w0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>AccessibleHandicapes</value>
  </data>
  <data name="Property.HandicapAccessible.Definition[1Wu3w0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Indique que cet objet est conçu pour être accessible aux handicapés. Indication donnée selon le Code National.</value>
  </data>
  <data name="Property.HasNonSkidSurface.Name[1cFOa0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>AntiDerapant</value>
  </data>
  <data name="Property.HasNonSkidSurface.Definition[1cFOa0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Indique si le revêtement de surface est anti dérapant (VRAI) ou non (FAUX)</value>
  </data>
  <data name="Property.FireExit.Name[1RWlG0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>SortieSecours</value>
  </data>
  <data name="Property.FireExit.Definition[1RWlG0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Indique si cet objet est conçu pour servir de sortie en cas d'incendie (VRAI) ou non (FAUX). Définition de la sortie de secours selon le Code National.</value>
  </data>
  <data name="Property.IsExternal.Name[1GByY0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>EstExterieur</value>
  </data>
  <data name="Property.IsExternal.Definition[1GByY0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Indique si l'élément est conçu pour être utilisé à l'extérieur (VRAI) ou non (FAUX). Si VRAI, c'est un élément extérieur qui donne sur l'extérieur du bâtiment.</value>
  </data>
  <data name="Property.ThermalTransmittance.Name[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.ThermalTransmittance.Definition[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.LoadBearing.Name[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.LoadBearing.Definition[]" xml:space="preserve">
    <value />
  </data>
  <data name="Property.FireRating.Name[1LZHC0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>ResistanceAuFeu</value>
  </data>
  <data name="Property.FireRating.Definition[1LZHC0qVyHuO00025QrE$V]" xml:space="preserve">
    <value>Classement au feu de l'élément donné selon la classification nationale de sécurité incendie.</value>
  </data>
</root>