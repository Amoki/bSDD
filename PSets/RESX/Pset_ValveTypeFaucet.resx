<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PSet.Name[2Ucv80qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Pset_ValveTypeFaucet</value>
  </data>
  <data name="PSet.Definition[2Ucv80qXGHuO00025QrE$V]" xml:space="preserve">
    <value>A small diameter valve, with a free outlet, from which water is drawn.</value>
  </data>
  <data name="Property.FaucetType.Name[2Z_Do0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>FaucetType</value>
  </data>
  <data name="Property.FaucetType.Definition[2Z_Do0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Defines the range of faucet types that may be specified where:Bib:	 Faucet with a horizontal inlet and a nozzle that discharges downwards.Globe:	 Faucet fitted through the end of a bath, with a horizontal inlet, a partially spherical body and a vertical nozzle.Diverter: 	Combination faucet assembly with a valve to enable the flow of mixed water to be transferred to a showerhead.DividedFlowCombination:	 Combination faucet assembly in which hot and cold water are kept separate until emerging from a common nozzle.Pillar:	 Faucet that has a vertical inlet and a nozzle that discharges downwards.SingleOutletCombination =	 Combination faucet assembly in which hot and cold water mix before emerging from a common nozzle.Spray:	 Faucet with a spray outlet.SprayMixing:	 Spray faucet connected to hot and cold water supplies that delivers water at a temperature determined during use.</value>
  </data>
  <data name="Property.FaucetOperation.Name[2t2wo0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>FaucetOperation</value>
  </data>
  <data name="Property.FaucetOperation.Definition[2t2wo0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Defines the range of ways in which a faucet can be operated that may be specified where:CeramicDisc: Quick action faucet with a ceramic seal to open or close the orifice.LeverHandle: Quick action faucet that is operated by a lever handle.NonConcussiveSelfClosing:	 Self closing faucet that does not induce surge pressure.QuarterTurn: Quick action faucet that can be fully opened or shut by turning the operating mechanism through 90 degrees.QuickAction: Faucet that can be opened or closed fully with a single small movement of the operating mechanism.ScrewDown: Faucet in which a plate or disc is moved, by the rotation of a screwed spindle, to close or open the orifice.SelfClosing: Faucet that is opened by pressure of the top of an operating spindle and is closed under the action of a spring or weight when the pressure is released.TimedSelfClosing: 	Self closing faucet that discharges for a predetermined period of time.</value>
  </data>
  <data name="Property.FaucetFunction.Name[3Bw400qXGHuO00025QrE$V]" xml:space="preserve">
    <value>FaucetFunction</value>
  </data>
  <data name="Property.FaucetFunction.Definition[3Bw400qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Defines the operating temperature of a faucet that may be specified.</value>
  </data>
  <data name="Property.Finish.Name[3QDbm0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="Property.Finish.Definition[3QDbm0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Description of the finish applied to the faucet.</value>
  </data>
  <data name="Property.FaucetTopDescription.Name[3WB3q0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>FaucetTopDescription</value>
  </data>
  <data name="Property.FaucetTopDescription.Definition[3WB3q0qXGHuO00025QrE$V]" xml:space="preserve">
    <value>Description of the operating mechanism/top of the faucet.</value>
  </data>
</root>